---
import * as Organizations from "@paperwait/core/organizations";
import { registrationStep2Schema } from "@paperwait/core/organizations/shared";
import * as v from "valibot";

import RegistrationStep1 from "~/components/registration/step-1.astro";
import RegistrationStep2 from "~/components/registration/step-2.astro";
import { getFormErrors, getFormInput } from "./_utils";

import type { RegistrationStepProps } from "~/components/props";

export const partial = true;

type ComponentProps =
  | { variant: "step-1"; data: RegistrationStepProps }
  | { variant: "step-2"; data: RegistrationStepProps };

const from = v.parse(
  v.picklist(["step-1", "step-3"]),
  new URL(Astro.request.url).searchParams.get("from"),
);

const formData = await Astro.request.formData();
const input = getFormInput(formData);

let props: ComponentProps;
switch (from) {
  case "step-1": {
    const schema = v.pipeAsync(
      registrationStep2Schema,
      v.forwardAsync(
        v.partialCheckAsync(
          [["licenseKey"]],
          ({ licenseKey }) =>
            licenseKey
              ? Organizations.isLicenseKeyAvailable(licenseKey)
              : false,
          "Invalid license key",
        ),
        ["licenseKey"],
      ),
      v.forwardAsync(
        v.partialCheckAsync(
          [["orgSlug"]],
          ({ orgSlug }) =>
            orgSlug ? Organizations.isSlugUnique(orgSlug) : false,
          "Organization slug is not unique",
        ),
        ["orgSlug"],
      ),
    );

    const result = await v.safeParseAsync(schema, input);

    props = !result.success
      ? {
          variant: "step-1",
          data: {
            input,
            errors: getFormErrors(result.issues),
          },
        }
      : { variant: "step-2", data: { input: result.output } };
    break;
  }
  case "step-3": {
    props = {
      variant: "step-2",
      data: { input },
    };
    break;
  }
  default:
    return new Response(null, { status: 400 });
}
---

{
  props.variant === "step-1" ? (
    <RegistrationStep1 {...props.data} />
  ) : (
    <RegistrationStep2 {...props.data} />
  )
}
