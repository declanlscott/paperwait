---
import {
  registrationSchema,
  registrationStep3Schema,
} from "@paperwait/core/organizations/shared";
import * as R from "remeda";
import * as v from "valibot";

import RegistrationStep2 from "~/components/registration/step-2.astro";
import RegistrationStep3 from "~/components/registration/step-3.astro";

import type { Registration } from "@paperwait/core/organizations/shared";
import type { RegistrationStepProps } from "~/components/props";

export const partial = true;

type ComponentProps =
  | { variant: "step-2"; data: RegistrationStepProps }
  | { variant: "step-3"; data: RegistrationStepProps };

const from = v.parse(
  v.picklist(["step-2", "confirm"]),
  new URL(Astro.request.url).searchParams.get("from"),
);

const formData = await Astro.request.formData();
const input = R.keys(registrationSchema.entries).reduce(
  (fields, key) => {
    fields[key] = formData.get(key)?.toString();
    return fields;
  },
  {} as Record<keyof Registration, string | undefined>,
);

let props: ComponentProps;
switch (from) {
  case "step-2": {
    const result = v.safeParse(registrationStep3Schema, input);

    props = !result.success
      ? {
          variant: "step-2",
          data: {
            input,
            errors: result.issues.reduce(
              (errors, issue) => {
                const path =
                  v.getDotPath<typeof registrationStep3Schema>(issue);
                if (path) errors[path]?.push(issue.message);
                return errors;
              },
              {} as NonNullable<RegistrationStepProps["errors"]>,
            ),
          },
        }
      : { variant: "step-3", data: { input: result.output } };
    break;
  }
  case "confirm": {
    props = {
      variant: "step-3",
      data: { input },
    };
    break;
  }
  default:
    return new Response(null, { status: 400 });
}
---

{
  props.variant === "step-2" ? (
    <RegistrationStep2 {...props.data} />
  ) : (
    <RegistrationStep3 {...props.data} />
  )
}
