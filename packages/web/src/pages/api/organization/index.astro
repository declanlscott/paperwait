---
import { deleteParameter, putParameter } from "@paperwait/core/aws";
import { db } from "@paperwait/core/database";
import {
  BadRequestError,
  DatabaseError,
  HttpError,
  MethodNotAllowedError,
} from "@paperwait/core/errors";
import { Organization } from "@paperwait/core/organization";
import { syncPapercutAccounts } from "@paperwait/core/papercut";
import { Room } from "@paperwait/core/room";
import { validate } from "@paperwait/core/valibot";

import Layout from "~/layouts/layout.astro";
import { Registration } from "~/lib/schemas";

let putParameterCommandOutput:
  | Awaited<ReturnType<typeof putParameter>>
  | undefined;

let org: Pick<Organization, "id" | "slug"> | undefined;

try {
  if (Astro.request.method !== "POST") throw new MethodNotAllowedError();

  const formData = await Astro.request.formData();
  const registration = validate(
    Registration,
    Object.fromEntries(formData.entries()),
    { Error: BadRequestError, message: "Failed to parse registration" },
  );

  org = await db.transaction(async (tx) => {
    [org] = await tx
      .insert(Organization)
      .values({
        name: registration.name,
        slug: registration.slug,
        provider: registration.authProvider,
        providerId: registration.providerId,
      })
      .returning({ id: Organization.id, slug: Organization.slug });

    [putParameterCommandOutput] = await Promise.all([
      // Store the PaperCut server details in SSM
      putParameter({
        Name: `/paperwait/org/${org.id}/papercut`,
        Value: JSON.stringify({
          serverUrl: registration.serverUrl,
          authToken: registration.authToken,
        }),
        Type: "SecureString",
        Overwrite: false,
      }),
      // Create a default room for the organization
      tx
        .insert(Room)
        .values({ name: "Default", status: "draft", orgId: org.id }),
    ]);

    if (registration.syncPapercutAccounts)
      await syncPapercutAccounts(tx, org.id, undefined);

    return org;
  });
} catch (e) {
  console.error(e);

  // Rollback the parameter if the transaction fails
  if (org && putParameterCommandOutput)
    await deleteParameter({
      Name: `/paperwait/org/${org.id}/papercut`,
    });

  if (e instanceof HttpError) new Response(e.message, { status: e.statusCode });
  if (e instanceof DatabaseError) new Response(e.message, { status: 500 });

  new Response("Internal server error", { status: 500 });
}
---

<Layout title="Registration successful!" htmx>
  <div class="w-full lg:grid lg:min-h-[600px] lg:grid-cols-2 xl:min-h-[800px]">
    <div class="hidden bg-muted lg:block lg:max-h-screen">
      <img
        src="/placeholder.svg"
        alt="placeholder"
        width="1920"
        height="1080"
        class="size-full object-cover"
      />
    </div>

    <div class="flex items-center justify-center py-12">
      <div class="mx-auto grid w-[350px] gap-6">
        <div class="flex justify-center">
          <img src="/logo.svg" class="size-20" />
        </div>

        <div class="grid gap-2 text-center">
          <h1 class="text-2xl font-bold">Registration successful!</h1>
          <p class="text-sm text-muted-foreground">
            Your organization has been successfully registered.
          </p>
        </div>
      </div>
    </div>
  </div>
</Layout>
