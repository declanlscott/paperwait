/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tailnet/{tailnet}/devices": {
        parameters: {
            query?: {
                /** @description Optionally controls whether the response returns **all** fields or only a predefined subset of fields.
                 *     Currently, there are two supported options:
                 *
                 *     - **`all`:** return all fields in the response
                 *     - **`default`:** return all fields **except**:
                 *       - `enabledRoutes`
                 *       - `advertisedRoutes`
                 *       - `clientConnectivity` (which contains the following fields: `mappingVariesByDestIP`, `derp`, `endpoints`, `latency`, and `clientSupports`)
                 *
                 *     If the `fields` parameter is not supplied, then the default (limited fields) option is used.
                 *      */
                fields?: "all" | "default";
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List tailnet devices
         * @description Lists the devices in a tailnet.
         *
         *     OAuth Scope: `devices:core:read`.
         *
         */
        get: operations["listTailnetDevices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        /**
         * Get a device
         * @description Retrieve the details for the specified device.
         *
         *     OAuth Scope: `devices:core:read`.
         *
         */
        get: operations["getDevice"];
        put?: never;
        post?: never;
        /**
         * Delete a device
         * @description Deletes the device from its tailnet.
         *     The device must belong to the requesting user's tailnet.
         *     Deleting devices shared with the tailnet is not supported.
         *
         *     OAuth Scope: `devices:core`.
         *
         */
        delete: operations["deleteDevice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/expire": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Expire a device's key
         * @description Mark a device's node key as expired.
         *     This will require the device to re-authenticate in order to connect to the tailnet.
         *     The device must belong to the requesting user's tailnet.
         *
         *     OAuth Scope: `devices:core`.
         *
         */
        post: operations["expireDeviceKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/routes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        /**
         * List device routes
         * @description Retrieve the list of subnet routes that a device is advertising,
         *     as well as those that are enabled for it.
         *
         *     Routes must be both advertised and enabled for a device to act as a subnet router or exit node.
         *     If a device has advertised routes, they are not exposed to traffic until they are enabled.
         *     Conversely, if routes are enabled before they are advertised, they are not available for routing until the device in question has advertised them.
         *
         *     Learn more about [subnet routers](/kb/1019/subnets) and [exit nodes](/kb/1103/exit-nodes).
         *
         *     OAuth Scope: `devices:routes:read`.
         *
         */
        get: operations["listDeviceRoutes"];
        put?: never;
        /**
         * Set device routes
         * @description Set a device's enabled subnet routes by replacing the existing list of subnet routes with the supplied parameters.
         *     [Advertised routes](/kb/1019/subnets#advertise-subnet-routes) cannot be set through the API, since they must be set directly on the device.
         *
         *     Routes must be both advertised and enabled for a device to act as a subnet router or exit node.
         *     If a device has advertised routes, they are not exposed to traffic until they are enabled.
         *     Conversely, if routes are enabled before they are advertised, they are not available for routing until the device in question has advertised them.
         *
         *     Learn more about [subnet routers](/kb/1019/subnets) and [exit nodes](/kb/1103/exit-nodes).
         *
         *     OAuth Scope: `devices:routes`.
         *
         */
        post: operations["setDeviceRoutes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/authorized": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authorize device
         * @description This call marks a device as authorized or revokes its authorization for tailnets where device authorization is required,
         *     according to the authorized field in the payload.
         *
         *     OAuth Scope: `devices:core`.
         *
         */
        post: operations["authorizeDevice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/name": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set device name
         * @description When a device is added to a tailnet, its Tailscale [device name](https://tailscale.com/kb/1098/machine-names) (also sometimes referred to as machine name) is generated from its OS hostname.
         *     The device name is the canonical name for the device on your tailnet.
         *
         *     Device name changes immediately get propogated through your tailnet, so be aware that any existing [Magic DNS](https://tailscale.com/kb/1081/magicdns) URLs using the old name will no longer work.
         *
         *     OAuth Scope: `devices:core`.
         *
         */
        post: operations["setDeviceName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set device tags
         * @description Tags let you assign an identity to a device that is separate from human users, and use that identity as part of an ACL to restrict access.
         *     Tags are similar to role accounts, but more flexible.
         *
         *     Tags are created in the tailnet policy file by defining the tag and an owner of the tag.
         *     Once a device is tagged, the tag is the owner of that device.
         *     A single node can have multiple tags assigned.
         *
         *     Consult the policy file for your tailnet in the [admin console](https://login.tailscale.com/admin/acls) for the list of tags that have been created for your tailnet.
         *     Learn more about [tags](https://tailscale.com/kb/1068/).
         *
         *     OAuth Scope: `devices:core`.
         *
         */
        post: operations["setDeviceTags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update device key
         * @description When a device is added to a tailnet, its key expiry is set according to the tailnet's key expiry setting.
         *     If the key is not refreshed and expires, the device can no longer communicate with other devices in the tailnet.
         *
         *     OAuth Scope: `devices:core`.
         *
         */
        post: operations["updateDeviceKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/ip": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set device IPv4 address
         * @description When a device is added to a tailnet, its Tailscale IPv4 address is set at random either from the CGNAT range,
         *     or a subset of the CGNAT range specified by an [ip pool](https://tailscale.com/kb/1304/ip-pool).
         *     This endpoint can be used to replace the existing IPv4 address with a specific value.
         *
         *     This action will break any existing connections to this machine.
         *     You will need to reconnect to this machine using the new IP address.
         *     You may also need to flush your DNS cache.
         *
         *     OAuth Scope: `devices:core`.
         *
         */
        post: operations["setDeviceIp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        /**
         * Get device posture attributes
         * @description Retrieve all posture attributes for the specified device.
         *     This returns a JSON object of all the key-value pairs of posture attributes for the device.
         *
         *     OAuth Scope: `devices:posture_attributes:read`.
         *
         */
        get: operations["getDevicePostureAttributes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/attributes/{attributeKey}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
                /** @description The name of the posture attribute to set.
                 *     This must be prefixed with `custom`:
                 *
                 *     Keys have a maximum length of 50 characters including the namespace,
                 *     and can only contain letters, numbers, underscores, and colon.
                 *
                 *     Keys are case-sensitive. Keys must be unique,
                 *     but are checked for uniqueness in a case-insensitive manner.
                 *     For example, `custom:MyAttribute` and `custom:myattribute` cannot both be set within a single tailnet.
                 *
                 *     All values for a given key need to be of the same type,
                 *     which is determined when the first value is written for a given key.
                 *     For example, `custom:myattribute` cannot have a numeric value (`8`7) for one node and a string value (`"78"`)
                 *     for another node within the same tailnet.
                 *      */
                attributeKey: components["parameters"]["attributeKey"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set custom device posture attributes
         * @description Create or update a custom posture attribute on the specified device.
         *     User-managed attributes must be in the custom namespace,
         *     which is indicated by prefixing the attribute key with `custom:`.
         *
         *     Custom device posture attributes are available for the Personal and Enterprise plans.
         *
         *     OAuth Scope: `devices:posture_attributes`.
         *
         */
        post: operations["setCustomDevicePostureAttributes"];
        /**
         * Delete custom device posture attributes
         * @description Delete a posture attribute from the specified device.
         *     This is only applicable to user-managed posture attributes in the custom namespace,
         *     which is indicated by prefixing the attribute key with `custom:`.
         *
         *     OAuth Scope: `devices:posture_attributes`.
         *
         */
        delete: operations["deleteCustomDevicePostureAttributes"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/device-invites": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        /**
         * List device invites
         * @description List all share invites for a device.
         *
         *     OAuth Scope: `device_invites:read`.
         *
         */
        get: operations["listDeviceInvites"];
        put?: never;
        /**
         * Create device invites
         * @description Create new share invites for a device.
         *
         *     Note that device invites cannot be created using an API access token generated from an OAuth client as the shared device is scoped to a user.
         *
         */
        post: operations["createDeviceInvites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/user-invites": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List user invites
         * @description List all open (not yet accepted) user invites to the tailnet.
         */
        get: operations["listUserInvites"];
        put?: never;
        /**
         * Create user invites
         * @description Create, and optionally email out, new user invites to join the tailnet.
         */
        post: operations["createUserInvites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-invites/{userInviteId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user invite. */
                userInviteId: components["parameters"]["userInviteId"];
            };
            cookie?: never;
        };
        /**
         * Get a user invite
         * @description Retrieve a specific user invite.
         *
         */
        get: operations["getUserInvite"];
        put?: never;
        post?: never;
        /**
         * Delete a user invite
         * @description Deletes a specific user invite.
         *
         */
        delete: operations["deleteUserInvite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-invites/{userInviteId}/resend": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user invite. */
                userInviteId: components["parameters"]["userInviteId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend a user invite
         * @description Resend a user invite by email. You can only use this if the specified invite
         *     was originally created with an email specified.
         *     Refer to [creating user invites for a tailnet](#tag/userinvites/post/tailnet/{tailnet}/user-invites).
         *
         *     Note: Invite resends are rate limited to one per minute.
         *
         */
        post: operations["resendUserInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device-invites/{deviceInviteId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device invite. */
                deviceInviteId: components["parameters"]["deviceInviteId"];
            };
            cookie?: never;
        };
        /**
         * Get a device invite
         * @description Retrieve a specific device invite.
         *
         *     OAuth Scope: `device_invites:read`.
         *
         */
        get: operations["getDeviceInvite"];
        put?: never;
        post?: never;
        /**
         * Delete a device invite
         * @description Delete a specific device invite.
         *
         *     OAuth Scope: `device_invites`.
         *
         */
        delete: operations["deleteDeviceInvite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device-invites/{deviceInviteId}/resend": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device invite. */
                deviceInviteId: components["parameters"]["deviceInviteId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend a device invite
         * @description Resend a device invite by email. You can only use this if the specified invite
         *     was originally created with an email specified.
         *     Refer to [creating device invites for a device](#tag/deviceinvites/post/device/{deviceId}/device-invites).
         *
         *     Note: Invite resends are rate limited to one per minute.
         *
         *     Note that device invites cannot be resent using an API access token generated from an OAuth client as the shared device is scoped to a user.
         *
         */
        post: operations["resendDeviceInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device-invites/-/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept a device invite
         * @description Accepts the invitation to share a device into the requesting user's tailnet.
         *
         *     Note that device invites cannot be accepted using an API access token generated from an OAuth client as the shared device is scoped to a user.
         *
         */
        post: operations["acceptDeviceInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/logging/configuration": {
        parameters: {
            query: {
                /** @description The start of the time window for which to retrieve logs, in RFC 3339 format. */
                start: components["parameters"]["start"];
                /** @description The end of the time window for which to retrieve logs, in RFC 3339 format. */
                end: components["parameters"]["end"];
                /** @description List of filters on actors, either exact actor IDs or a wildcard search on login name or display name indicated as `~search`. */
                actor?: components["parameters"]["actor"];
                /** @description List of target elements for which to filter, attempts to match any part of any of the targets to any of the given strings. */
                target?: components["parameters"]["target"];
                /** @description List of events for which to filter. */
                event?: components["parameters"]["event"];
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List configuration audit logs
         * @description List all configuration audit logs for a tailnet.
         *
         *     OAuth Scope: `logs:configuration:read`.
         *
         */
        get: operations["listConfigurationAuditLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/logging/network": {
        parameters: {
            query: {
                /** @description The start of the time window for which to retrieve logs, in RFC 3339 format. */
                start: components["parameters"]["start"];
                /** @description The end of the time window for which to retrieve logs, in RFC 3339 format. */
                end: components["parameters"]["end"];
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List network flow logs
         * @description List all network flow logs for a tailnet.
         *
         *     OAuth Scope: `logs:network:read`.
         *
         */
        get: operations["listNetworkFlowLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/logging/{logType}/stream/status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description The type of log. */
                logType: components["parameters"]["logType"];
            };
            cookie?: never;
        };
        /**
         * Get log streaming status
         * @description Retrieve the log streaming status for the provided log type.
         *
         *     OAuth Scope: `log_streaming:read`.
         *
         */
        get: operations["getLogStreamingStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/logging/{logType}/stream": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description The type of log. */
                logType: components["parameters"]["logType"];
            };
            cookie?: never;
        };
        /**
         * Get log streaming configuration
         * @description Retrieve the log streaming configuration for the provided log type.
         *
         *     OAuth Scope: `log_streaming:read`.
         *
         */
        get: operations["getLogStreamingConfiguration"];
        /**
         * Set log streaming configuration
         * @description Set the log streaming configuration for the provided log type.
         *
         *     OAuth Scope: `log_streaming`. `device_invites` and `policy_file` are also required if streaming to a [private endpoint](https://tailscale.com/kb/1255/log-streaming#private-endpoints).
         *
         */
        put: operations["setLogStreamingConfiguration"];
        post?: never;
        /**
         * Disable log streaming
         * @description Delete the log streaming configuration for the provided log type.
         *
         *     OAuth Scope: `log_streaming`.
         *
         */
        delete: operations["disableLogStreaming"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/dns/nameservers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List DNS nameservers
         * @description Lists the global DNS nameservers for a tailnet.
         *
         */
        get: operations["listDnsNameservers"];
        put?: never;
        /**
         * Set DNS nameservers
         * @description Replaces the list of global DNS nameservers for the given tailnet with the list supplied in the request.
         *
         *     Note that changing the list of DNS nameservers may also affect the status of MagicDNS (if MagicDNS is on; learn about [MagicDNS](https://tailscale.com/kb/1081)).
         *     If all nameservers have been removed, MagicDNS will be automatically disabled (until explicitly turned back on by the user).
         *
         */
        post: operations["setDnsNameservers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/dns/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * Get DNS preferences
         * @description Retrieves the DNS preferences that are currently set for the given tailnet.
         *
         */
        get: operations["getDnsPreferences"];
        put?: never;
        /**
         * Set DNS preferences
         * @description Set the DNS preferences for a tailnet; specifically, the MagicDNS setting.
         *     Note that MagicDNS is dependent on DNS servers.
         *     Learn about [MagicDNS](https://tailscale.com/kb/1081).
         *
         *     If there is at least one DNS server, then MagicDNS can be enabled.
         *     Otherwise, it returns an error.
         *
         *     Note that removing all nameservers will turn off MagicDNS.
         *     To reenable it, nameservers must be added back, and MagicDNS must be explicitly turned on.
         *
         */
        post: operations["setDnsPreferences"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/dns/searchpaths": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List DNS search paths
         * @description Retrieves the list of search paths, also referred to as *search domains*, that is currently set for the given tailnet.
         *
         */
        get: operations["listDnsSearchPaths"];
        put?: never;
        /**
         * Set DNS search paths
         * @description Replaces the list of search paths for the given tailnet.
         *
         */
        post: operations["setDnsSearchPaths"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/dns/split-dns": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * Get split DNS
         * @description Retrieves the split DNS settings, which is a map from domains to lists of nameservers, that is currently set for the given tailnet.
         *
         */
        get: operations["getSplitDns"];
        /**
         * Set split DNS
         * @description Replaces the split DNS settings for a given tailnet.
         *     Setting the value of a mapping to `null` clears the nameservers for that domain.
         *     Sending an empty object clears nameservers for all domains.
         *
         */
        put: operations["setSplitDns"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update split DNS
         * @description Performs partial updates of the split DNS settings for a given tailnet.
         *     Only domains specified in the request map will be modified.
         *     Setting the value of a mapping to `null` clears the nameservers for that domain.
         *
         */
        patch: operations["updateSplitDns"];
        trace?: never;
    };
    "/tailnet/{tailnet}/keys": {
        parameters: {
            query: {
                /** @description If set to true, this will return all auth keys, API acess tokens and OAuth clients for the tailnet. */
                all: components["parameters"]["all"];
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List tailnet keys
         * @description Returns a list of active auth keys and API access tokens.
         *
         *     If the parameter {all} was not specified, the set of keys returned depends on the access token used to make the request:
         *     - If the API call is made with a user-owned API access token, this returns only the keys owned by that user.
         *     - If the API call is made with an access token derived from an OAuth client, this returns all OAuth clients for the tailnet.
         *
         *     OAuth Scope: `api_access_tokens:read` grants access to personal API access tokens.
         *
         *     OAuth Scope: `auth_keys:read` grants access to machine auth keys.
         *
         *     OAuth Scope: `oauth_keys:read` grants access to OAuth clients and OAuth tokens.
         *
         */
        get: operations["listTailnetKeys"];
        put?: never;
        /**
         * Create auth key
         * @description Creates a new [auth key](https://tailscale.com/kb/1085/) in the specified tailnet.
         *     The key will be associated with the user who owns the API access token used to make this call,
         *     or, if the call is made with an access token derived from an OAuth client, the key will be owned by the tailnet.
         *
         *     Returns a JSON object with the supplied capabilities in addition to the generated key.
         *     The key should be recorded and kept safe and secure because it wields the capabilities specified in the request.
         *     The identity of the key is embedded in the key itself and can be used to perform operations on the key (e.g., revoking it or retrieving information about it).
         *     The full key can no longer be retrieved after the initial response.
         *
         *     OAuth Scope: `auth_keys`.
         *
         */
        post: operations["createAuthKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/keys/{keyId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description The id of the key.
                 *     The key ID can be found in the [admin console](https://login.tailscale.com/admin/settings/keys).
                 *      */
                keyId: components["parameters"]["keyId"];
            };
            cookie?: never;
        };
        /**
         * Get key
         * @description Returns a JSON object with information about a specific api access token or auth key, such as its creation and expiration dates and its capabilities.
         *
         *     OAuth Scope: `api_access_tokens:read` grants access to personal API access tokens.
         *
         *     OAuth Scope: `auth_keys:read` grants access to machine auth keys.
         *
         *     OAuth Scope: `oauth_keys:read` grants access to OAuth clients and OAuth tokens.
         *
         */
        get: operations["getKey"];
        put?: never;
        post?: never;
        /**
         * Delete key
         * @description Deletes a specific api access token or auth key.
         *
         *     OAuth Scope: `api_access_tokens` grants access to personal API access tokens.
         *
         *     OAuth Scope: `auth_keys` grants access to machine auth keys.
         *
         *     OAuth Scope: `oauth_keys` grants access to OAuth clients and OAuth tokens.
         *
         */
        delete: operations["deleteKey"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/acl": {
        parameters: {
            query?: never;
            header?: {
                /** @description Response is encoded as JSON if `application/json` is requested, otherwise HuJSON will be returned. */
                Accept?: components["parameters"]["AcceptHeaderParam"];
            };
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * Get policy file
         * @description Retrieves the current policy file for the given tailnet;
         *     this includes the ACL along with the rules and tests that have been defined.
         *
         *     This method can return the policy file as JSON or HuJSON, depending on the Accept header.
         *     The response also includes an `ETag` header, which can be optionally included when [setting the policy file](#tag/policyfile/post/tailnet/{tailnet}/acl) to avoid missed updates.
         *
         *     Learn more about [policy file ACL syntax](https://tailscale.com/kb/1337/acl-syntax).
         *
         *     OAuth Scope: `policy_file:read`.
         *
         */
        get: operations["getPolicyFile"];
        put?: never;
        /**
         * Set policy file
         * @description Sets the ACL for the given tailnet. HuJSON and JSON are both accepted inputs.
         *     An `If-Match` header can be set to avoid missed updates.
         *
         *     On success, returns the updated ACL in JSON or HuJSON according to the `Accept` header.
         *     Otherwise, errors are returned for incorrectly defined ACLs, ACLs with failing tests on attempted updates, and mismatched `If-Match` header and `ETag`.
         *
         *     Learn more about [policy file ACL syntax](https://tailscale.com/kb/1337/acl-syntax).
         *
         *     OAuth Scope: `policy_file`.
         *
         */
        post: operations["setPolicyFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/acl/preview": {
        parameters: {
            query: {
                /** @description Specify for which type of resource (user or IP port) matching rules are to be fetched.
                 *     Read about [previewing changes in the admin console](https://tailscale.com/kb/1018/#previewing-changes).
                 *
                 *     OAuth Scope: `policy_file:read`.
                 *      */
                type: "user" | "ipport";
                /** @description - If `type` is `user`, provide the email of a valid user with registered machines.
                 *     - If `type` is `ipport`, provide an IP address + port: `10.0.0.1:80`.
                 *
                 *     The supplied policy file is queried with this parameter to determine which rules match.
                 *      */
                previewFor: string;
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview rule matches
         * @description When given a user or IP port to match against,
         *     returns the tailnet policy rules that apply to that resource,
         *     without saving the policy file to the server.
         *
         */
        post: operations["previewRuleMatches"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/acl/validate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate and test policy file
         * @description This endpoint works in one of two modes, neither of which modifies your current tailnet policy file:
         *
         *     - Run ACL tests: When the request body contains ACL tests as a JSON array,
         *       Tailscale runs ACL tests against the tailnet's current policy file.
         *       Learn more about [ACL tests](https://tailscale.com/kb/1337/acl-syntax#tests).
         *     - Validate a new policy file: When the request body is a JSON object,
         *       Tailscale interprets the body as a hypothetical new tailnet policy file with new ACLs,
         *       including any new rules and tests.
         *       It validates that the policy file is parsable and runs tests to validate the existing rules.
         *
         *     In either case, this method does not modify the tailnet policy file in any way.
         *
         *     OAuth Scope: `policy_file:read`.
         *
         */
        post: operations["validateAndTestPolicyFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/posture/integrations": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List all posture integrations
         * @description List all of the posture integrations for a tailnet.
         *
         *     OAuth Scope: `feature_settings:read`.
         *
         */
        get: operations["getPostureIntegrations"];
        put?: never;
        /**
         * Create a posture integration
         * @description Create a posture integration, returning the resulting [PostureIntegration](#model/postureintegration).
         *
         *     Must include `provider` and `clientSecret`.
         *
         *     Currently, only one integration for each provider is supported.
         *
         *     OAuth Scope: `feature_settings`.
         *
         */
        post: operations["createPostureIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posture/integrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for a posture integration. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Get a posture integration
         * @description Gets the posture integration identified by `{id}`.
         *
         *     OAuth Scope: `feature_settings:read`.
         *
         */
        get: operations["getPostureIntegration"];
        put?: never;
        post?: never;
        /**
         * Delete a posture integration
         * @description Delete a specific posture integration.
         *
         *     OAuth Scope: `feature_settings`.
         *
         */
        delete: operations["deletePostureIntegration"];
        options?: never;
        head?: never;
        /**
         * Update a posture integration
         * @description Updates the posture integration identified by `{id}`. You may omit the `clientSecret` from your request to retain the previously configured `clientSecret`.
         *
         *     OAuth Scope: `feature_settings`.
         *
         */
        patch: operations["updatePostureIntegration"];
        trace?: never;
    };
    "/tailnet/{tailnet}/users": {
        parameters: {
            query?: {
                /** @description Allows for filtering the output by user type.
                 *      */
                type?: "member" | "shared" | "all";
                /** @description Allows for filtering the output by user role. Learn more about [user roles](kb/1138/user-roles).
                 *      */
                role?: "owner" | "member" | "admin" | "it-admin" | "network-admin" | "billing-admin" | "auditor" | "all";
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List users
         * @description List all users of a tailnet.
         *
         *     OAuth Scope: `users:read`.
         *
         */
        get: operations["listUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        /**
         * Get a user
         * @description Retrieve details about the specified user.
         *
         *     OAuth Scope: `users:read`.
         *
         */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update user role
         * @description Update the role for the specified user.
         *
         *     Learn more about [user roles](kb/1138/user-roles).
         *
         *     OAuth Scope: `users`.
         *
         *     > ⓘ User-based access tokens cannot update their own user's role.
         *
         */
        post: operations["updateUserRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve a user
         * @description Approve a pending user's access to the tailnet.
         *     This is a no-op if user approval has not been enabled for the tailnet, or if the user is already approved.
         *
         *     User approval can be managed using the [tailnet settings endpoints](#tag/tailnetsettings).
         *
         *     Learn more about [user approval](/kb/1239/user-approval) and [enabling user approval for your network](/kb/1239/user-approval#enable-user-approval-for-your-network).
         *
         *     OAuth Scope: `users`.
         *
         *     > ⓘ User-based access tokens cannot approve their own user.
         *
         */
        post: operations["approveUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/suspend": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Suspend a user
         * @description > ⓘ This endpoint is available for the [Personal and Enterprise plans](/pricing).
         *
         *     Suspends a user from their tailnet. Learn more about [suspending users](/kb/1145/remove-team-members#suspending-users).
         *
         *     OAuth Scope: `users`.
         *
         *     > ⓘ User-based access tokens cannot suspend their own user.
         *
         */
        post: operations["suspendUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restore a user
         * @description > ⓘ This endpoint is available for the [Personal and Enterprise plans](/pricing).
         *
         *     Restores a suspended user's access to their tailnet. Learn more about [restoring users](/kb/1145/remove-team-members#restoring-users).
         *
         *     OAuth Scope: `users`.
         *
         *     > ⓘ User-based access tokens cannot restore their own user.
         *
         */
        post: operations["restoreUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete a user
         * @description > ⓘ This endpoint is available for the [Personal and Enterprise plans](/pricing).
         *
         *     Delete a user from their tailnet. Learn more about [deleting users](/kb/1145/remove-team-members#deleting-users).
         *
         *     OAuth Scope: `users`.
         *
         *     > ⓘ User-based access tokens cannot delete their own user.
         *
         */
        post: operations["deleteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * Get contacts
         * @description Retrieve the tailnet's current contacts.
         *
         *     OAuth Scope: `account_settings:read`.
         *
         */
        get: operations["getContacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/contacts/{contactType}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description Type of contact. */
                contactType: components["parameters"]["contactType"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update contact
         * @description Update the preferences for this type of contact. If the email address has changed, the system will send a verification email to confirm the change.
         *
         *     OAuth Scope: `account_settings`.
         *
         */
        patch: operations["updateContact"];
        trace?: never;
    };
    "/tailnet/{tailnet}/contacts/{contactType}/resend-verification-email": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description Type of contact. */
                contactType: components["parameters"]["contactType"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend verification email
         * @description Resends the verification email for this contact, if and only if verification is still pending.
         *
         *     OAuth Scope: `account_settings`.
         *
         */
        post: operations["resendContactVerificationEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * List webhooks
         * @description List all webhooks for a tailnet.
         *
         *     OAuth Scope: `webhooks:read`.
         *
         */
        get: operations["listWebhooks"];
        put?: never;
        /**
         * Create a webhook
         * @description Create a webhook within a tailnet.
         *
         *     OAuth Scope: `webhooks`.
         *
         */
        post: operations["createWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{endpointId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID for the webhook endpoint.
                 *      */
                endpointId: components["parameters"]["endpointId"];
            };
            cookie?: never;
        };
        /**
         * Get webhook
         * @description Retrieve a specific webhook.
         *
         *     OAuth Scope: `webhooks:read`.
         *
         */
        get: operations["getWebhook"];
        put?: never;
        post?: never;
        /**
         * Delete webhook
         * @description Delete a specific webhook.
         *
         *     OAuth Scope: `webhooks`.
         *
         */
        delete: operations["deleteWebhook"];
        options?: never;
        head?: never;
        /**
         * Update webhook
         * @description Update a specific webhook.
         *
         *     OAuth Scope: `webhooks`.
         *
         */
        patch: operations["updateWebhook"];
        trace?: never;
    };
    "/webhooks/{endpointId}/test": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID for the webhook endpoint.
                 *      */
                endpointId: components["parameters"]["endpointId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test a webhook
         * @description Test a specific webhook by sending out a test event to the endpoint URL.
         *     This endpoint queues the event which is sent out asynchronously.
         *
         *     If your webhook is configured correctly, within a few seconds your webhook endpoint should receive an event with type of "test".
         *
         *     OAuth Scope: `webhooks`.
         *
         */
        post: operations["testWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{endpointId}/rotate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID for the webhook endpoint.
                 *      */
                endpointId: components["parameters"]["endpointId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rotate webhook secret
         * @description Rotate and generate a new secret for a specific webhook.
         *
         *     This secret is used for generating the `Tailscale-Webhook-Signature` header in requests sent to the endpoint URL.
         *     Learn more about [verifying webhook event signatures](/kb/1213/webhooks#verifying-an-event-signature).
         *
         *     OAuth Scope: `webhooks`.
         *
         */
        post: operations["rotateWebhookSecret"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tailnet/{tailnet}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /**
         * Get tailnet settings
         * @description Retrieve the settings for a specific tailnet.
         *
         *     OAuth Scope: `logs:network:read` - required to view `networkFlowLoggingOn` setting.
         *
         */
        get: operations["getTailnetSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update tailnet settings
         * @description Update the settings for a specific tailnet.
         *
         *     OAuth Scope: `logs:network` - required to update `networkFlowLoggingOn` setting.
         *
         */
        patch: operations["updateTailnetSettings"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description A Tailscale device (sometimes referred to as *node* or *machine*), is any computer or mobile device that joins a tailnet.
         *
         *     Each device has a unique ID (`nodeId` in the schema below) that is used to identify the device in API calls.
         *     This ID can be found by going to the [Machines](https://login.tailscale.com/admin/machines) page in the admin console,
         *     selecting the relevant device, then finding the ID in the Machine Details section.
         *     You can also [list all devices](#tag/devices/get/tailnet/{tailnet}/devices) in the tailnet to get their `nodeId` values.
         *      */
        Device: {
            /** @description A list of Tailscale IP addresses for the device,
             *     including both IPv4 (formatted as 100.x.y.z)
             *     and IPv6 (formatted as fd7a:115c:a1e0:a:b:c:d:e) addresses.
             *      */
            addresses?: string[];
            /**
             * @description The legacy identifier for a device; you
             *     can supply this value wherever {deviceId} is indicated in the
             *     endpoint. Note that although "id" is still accepted, "nodeId" is
             *     preferred.
             *
             * @example 92960230385
             */
            id?: string;
            /**
             * @description The preferred identifier for a device;
             *     supply this value wherever {deviceId} is indicated in the endpoint.
             *
             * @example n292kg92CNTRL
             */
            nodeId?: string;
            /**
             * @description The user who registered the node. For untagged nodes,
             *      this user is the device owner.
             *
             * @example amelie@example.com
             */
            user?: string;
            /**
             * @description The MagicDNS name of the device.
             *     Learn more about MagicDNS at https://tailscale.com/kb/1081/.
             *
             * @example pangolin.tailfe8c.ts.net
             */
            name?: string;
            /**
             * @description The machine name in the admin console.
             *     Learn more about machine names at https://tailscale.com/kb/1098/.
             *
             * @example pangolin
             */
            hostname?: string;
            /**
             * @description The version of the Tailscale client
             *     software; this is empty for external devices.
             *
             * @example v1.36.0
             */
            clientVersion?: string;
            /**
             * @description 'true' if a Tailscale client version
             *     upgrade is available. This value is empty for external devices.
             *
             * @example false
             */
            updateAvailable?: boolean;
            /**
             * @description The operating system that the device is running.
             *
             * @example linux
             */
            os?: string;
            /**
             * Format: date-time
             * @description The date on which the device was added
             *     to the tailnet; this is empty for external devices.
             *
             * @example 2022-12-01T05:23:30Z
             */
            created?: string;
            /**
             * Format: date-time
             * @description When device was last active on the tailnet.
             *
             * @example 2022-12-01T05:23:30Z
             */
            lastSeen?: string;
            /**
             * @description 'true' if the keys for the device will not expire.
             *     Learn more at https://tailscale.com/kb/1028/.
             *
             * @example false
             */
            keyExpiryDisabled?: boolean;
            /**
             * Format: date-time
             * @description The expiration date of the device's auth key.
             *     Learn more about key expiry at https://tailscale.com/kb/1028/.
             *
             * @example 2023-05-30T04:44:05Z
             */
            expires?: string;
            /**
             * @description 'true' if the device has been authorized to join the tailnet; otherwise, 'false'.
             *     Learn more about device authorization at https://tailscale.com/kb/1099/.
             *
             * @example false
             */
            authorized?: boolean;
            /**
             * @description 'true', indicates that a device is not a member of the tailnet, but is shared in to the tailnet;
             *     if 'false', the device is a member of the tailnet.
             *     Learn more about node sharing at https://tailscale.com/kb/1084/.
             *
             * @example false
             */
            isExternal?: boolean;
            /**
             * @description For internal use and is not required for any API operations.
             *     This value is empty for external devices.
             *
             * @example
             */
            machineKey?: string;
            /**
             * @description Mostly for internal use, required for select operations, such as adding a node to a locked tailnet.
             *     Learn about tailnet locks at https://tailscale.com/kb/1226/.
             *
             * @example nodekey:01234567890abcdef
             */
            nodeKey?: string;
            /**
             * @description 'true' if the device is not allowed to accept any connections over Tailscale, including pings.
             *     Learn more in the "Allow incoming connections" section of https://tailscale.com/kb/1072/.
             *
             * @example false
             */
            blocksIncomingConnections?: boolean;
            /**
             * @description The subnet routes for this device that have been approved by a tailnet admin.
             *     Learn more about subnet routes at https://tailscale.com/kb/1019/.
             *
             * @example [
             *       "10.0.0.0/16",
             *       "192.168.1.0/24"
             *     ]
             */
            enabledRoutes?: string[];
            /**
             * @description The subnets this device requests to expose.
             *     Learn more about subnet routes at https://tailscale.com/kb/1019/.
             *
             * @example [
             *       "10.0.0.0/16",
             *       "192.168.1.0/24"
             *     ]
             */
            advertisedRoutes?: string[];
            /**
             * @description clientConnectivity provides a report on the device's current physical network conditions.
             *
             * @example {
             *       "endpoints": [
             *         "199.9.14.201:59128",
             *         "192.68.0.21:59128"
             *       ],
             *       "latency": {
             *         "Dallas": {
             *           "latencyMs": 60.463043
             *         },
             *         "New York City": {
             *           "preferred": true,
             *           "latencyMs": 31.323811
             *         }
             *       },
             *       "mappingVariesByDestIP": false,
             *       "clientSupports": {
             *         "hairPinning": false,
             *         "ipv6": false,
             *         "pcp": false,
             *         "pmp": false,
             *         "udp": false,
             *         "upnp": false
             *       }
             *     }
             */
            clientConnectivity?: {
                /**
                 * @description Client's magicsock UDP IP:port endpoints (IPv4 or IPv6).
                 *
                 * @example [
                 *       "199.9.14.201:59128",
                 *       "192.68.0.21:59128"
                 *     ]
                 */
                endpoints?: string[];
                /**
                 * @description 'true' if the host's NAT mappings vary based on the destination IP.
                 *
                 * @example false
                 */
                mappingVariesByDestIP?: boolean;
                /**
                 * @description Map of DERP server locations and their current latency.
                 * @example {
                 *       "Dallas": {
                 *         "latencyMs": 60.463043
                 *       },
                 *       "New York City": {
                 *         "preferred": true,
                 *         "latencyMs": 31.323811
                 *       }
                 *     }
                 */
                latency?: {
                    [key: string]: {
                        /** @description 'true' for the node's preferred DERP server for incoming traffic.
                         *      */
                        preferred?: boolean;
                        /**
                         * Format: float
                         * @description Current latency to DERP server.
                         *
                         */
                        latencyMs?: number;
                    };
                };
                /** @description Identifies features supported by the client.
                 *      */
                clientSupports?: {
                    /**
                     * @description 'true' if your router can route connections
                     *     from endpoints on your LAN back to your LAN using those endpoints’
                     *     globally-mapped IPv4 addresses/ports.
                     *
                     * @example false
                     */
                    hairPinning?: boolean;
                    /**
                     * @description 'true' if the device OS supports IPv6,
                     *     regardless of whether IPv6 internet connectivity is available.
                     *
                     * @example false
                     */
                    ipv6?: boolean;
                    /**
                     * @description 'true' if PCP port-mapping service exists on your router.
                     *
                     * @example false
                     */
                    pcp?: boolean;
                    /**
                     * @description 'true' if NAT-PMP port-mapping service exists on your router.
                     *
                     * @example false
                     */
                    pmp?: boolean;
                    /**
                     * @description 'true' if UDP traffic is enabled on the current network;
                     *     if 'false', Tailscale may be unable to make direct connections, and will rely on our DERP servers.
                     *
                     * @example false
                     */
                    udp?: boolean;
                    /**
                     * @description 'true' if UPnP port-mapping service exists on your router.
                     *
                     * @example false
                     */
                    upnp?: boolean;
                };
            };
            /**
             * @description Lets you assign an identity to a device that is separate from human users, and use it as part of an ACL to restrict access.
             *     Once a device is tagged, the tag is the owner of that device.
             *     A single node can have multiple tags assigned.
             *     This value is empty for external devices.
             *     Learn more about tags at https://tailscale.com/kb/1068/.
             *
             * @example [
             *       "tag:golink"
             *     ]
             */
            tags?: string[];
            /**
             * @description Indicates an issue with the tailnet lock node-key signature on this device.
             *     This field is only populated when tailnet lock is enabled.
             *
             * @example
             */
            tailnetLockError?: string;
            /**
             * @description The node's tailnet lock key.
             *     Every node generates a tailnet lock key (so the value will be present) even if tailnet lock is not enabled.
             *     Learn more about tailnet lock at https://tailscale.com/kb/1226/.
             *
             * @example
             */
            tailnetLockKey?: string;
            /**
             * @description Contains extra identifiers from the device when the tailnet it is connected to has device posture identification collection enabled.
             *     If the device has not opted-in to posture identification collection, this will contain {"disabled": true}.
             *     Learn more about posture identity at https://tailscale.com/kb/1326/device-identity.
             *
             * @example {
             *       "serialNumbers": [
             *         "CP74LFQJXM"
             *       ]
             *     }
             */
            postureIdentity?: {
                /** @example [
                 *       "CP74LFQJXM"
                 *     ] */
                serialNumbers?: string[];
                disabled?: boolean;
            };
        };
        Error: {
            message: string;
        };
        DeviceRoutes: {
            /**
             * @description The subnets this device requests to expose.
             *
             * @example [
             *       "10.0.0.0/16",
             *       "192.168.1.0/24"
             *     ]
             */
            advertisedRoutes?: string[];
            /**
             * @description The subnet routes for this device that have been approved by a tailnet admin.
             *
             * @example [
             *       "10.0.0.0/16",
             *       "192.168.1.0/24"
             *     ]
             */
            enabledRoutes?: string[];
        };
        /** @example {
         *       "attributes": {
         *         "custom:myScore": 80,
         *         "custom:diskEncryption": true,
         *         "custom:myAttribute": "my_value",
         *         "node:os": "linux",
         *         "node:osVersion": "5.19.0-42-generic",
         *         "node:tsReleaseTrack": "stable",
         *         "node:tsVersion": "1.40.0",
         *         "node:tsAutoUpdate": false
         *       },
         *       "expiries": {
         *         "custom:myScore": "2024-04-23T18:25:43.511Z"
         *       }
         *     } */
        DevicePostureAttributes: {
            /** @description Contains all the posture attributes assigned to a node.
             *     Attribute values can be strings, numbers or booleans.
             *      */
            attributes?: {
                [key: string]: string | number | boolean;
            };
            /** @description Contains the expiry time for each posture attribute, if set.
             *      */
            expiries?: {
                [key: string]: string;
            };
        };
        /** @description A device invite is an invitation that shares a device with an external
         *     user (a user not in the device's tailnet).
         *
         *     Each device invite has a unique ID that is used to identify the invite
         *     in API calls. You can find all device invite IDs for a particular device
         *     by [listing all device invites](#tag/deviceinvites/POST/device/{deviceId}/device-invites)
         *     for a device.
         *      */
        DeviceInvite: {
            /**
             * @description The unique identifier for the invite.
             *     Supply this value wherever {deviceInviteId} is indicated in the endpoint.
             *
             * @example 12346
             */
            id?: string;
            /**
             * Format: date-time
             * @description The creation time of the invite.
             *
             * @example 2024-04-03T21:38:49.333829261Z
             */
            created?: string;
            /**
             * @description The ID of the tailnet to which the shared device belongs.
             *
             * @example 59954
             */
            tailnetId?: number;
            /**
             * @description The ID of the device being shared.
             *
             * @example 11055
             */
            deviceId?: number;
            /**
             * @description The ID of the user who created the share invite.
             *
             * @example 22012
             */
            sharerId?: number;
            /**
             * @description Specifies whether this device invite can be accepted
             *     more than once.
             *
             * @example false
             */
            multiUse?: boolean;
            /**
             * @description Specifies whether the invited user is able to use the
             *     device as an exit node when the device is advertising as one.
             *
             * @example false
             */
            allowExitNode?: boolean;
            /**
             * @description The email to which the invite was sent.
             *     If empty, the invite was not emailed to anyone,
             *     but the inviteUrl can be shared manually.
             *
             * @example user@example.com
             */
            email?: string;
            /**
             * Format: date-time
             * @description The last time the invite was attempted to be sent to Email.
             *     Only ever set if `email` is not empty.
             *
             * @example 2024-04-03T21:38:49.333829261Z
             */
            lastEmailSentAt?: string;
            /**
             * @description The link to accept the invite.
             *     Anyone with this link can accept the invite.
             *     It is not restricted to the person to which the invite was emailed.
             *
             * @example https://login.tailscale.com/admin/invite/<code>
             */
            inviteUrl?: string;
            /**
             * @description `true` when the share invite has been accepted.
             *
             * @example false
             */
            accepted?: boolean;
            /** @description Set when the invite has been accepted.
             *     It holds information about the user who accepted the share invite.
             *      */
            acceptedBy?: {
                /**
                 * @description The ID of the user who accepted the share invite.
                 *
                 * @example 33223
                 */
                id?: number;
                /**
                 * @description The login name of the user who accepted the share invite.
                 *
                 * @example someone@example.com
                 */
                loginName?: string;
                /**
                 * @description The profile pic URL for the user who accepted the share invite.
                 *
                 * @example
                 */
                profilePicUrl?: string;
            };
        };
        /** @description A user invite is an active invitation that lets a user join a tailnet
         *     with a preassigned [user role](https://tailscale.com/kb/1138/user-roles).
         *
         *     Each user invite has a unique ID that is used to identify the invite
         *     in API calls. You can find all user invite IDs for a particular tailnet
         *     by [listing user invites](#tag/userinvites/get/tailnet/{tailnet}/user-invites).
         *      */
        UserInvite: {
            /**
             * @description The unique identifier for the invite.
             *     Supply this value wherever `userInviteId` is indicated in the endpoint.
             *
             * @example 12346
             */
            id: string;
            /**
             * @description The tailnet user role to assign to the invited user upon accepting the invite.
             *
             * @example admin
             * @enum {string}
             */
            role: "member" | "admin" | "it-admin" | "network-admin" | "billing-admin" | "auditor";
            /**
             * @description The ID of the tailnet to which the user was invited.
             *
             * @example 59954
             */
            tailnetId: number;
            /**
             * @description The ID of the user who created the invite.
             *
             * @example 22012
             */
            inviterId: number;
            /**
             * @description The email to which the invite was sent.
             *     If empty, the invite was not emailed to anyone,
             *     but the inviteUrl can be shared manually.
             *
             * @example user@example.com
             */
            email?: string;
            /**
             * Format: date-time
             * @description The last time the invite was attempted to be sent to Email.
             *     Only ever set if `email` is not empty.
             *
             * @example 2024-04-03T21:38:49.333829261Z
             */
            lastEmailSentAt?: string;
            /**
             * @description Included when `email` is not part of the tailnet's domain,
             *     or when `email` is empty. It is the link to accept the invite.
             *
             *     When included, anyone with this link can accept the invite.
             *     It is not restricted to the person to which the invite was emailed.
             *
             *     When `email` is part of the tailnet's domain (has the same @domain.com
             *     suffix as the tailnet), the user can join the tailnet automatically by
             *     logging in with their domain email at https://login.tailscale.com/start.
             *     They'll be assigned the specified `role` upon signing in for the first
             *     time.
             *
             * @example https://login.tailscale.com/admin/invite/<code>
             */
            inviteUrl?: string;
        };
        /** @example {
         *       "action": "CREATE",
         *       "actor": {
         *         "displayName": "Lion Dahlia Armadillo",
         *         "id": "uZKk3KSfrH11KTM59",
         *         "loginName": "lion.dahlia.armadillo@example.com",
         *         "type": "USER"
         *       },
         *       "deferredAt": "0001-01-01T00:00:00Z",
         *       "eventGroupID": "0378d8f57300d172ef7ae3826e097ef0",
         *       "eventTime": "2024-06-06T15:25:26.583893Z",
         *       "origin": "ADMIN_CONSOLE",
         *       "target": {
         *         "id": "nBLYviWLGB21KTM59",
         *         "isEphemeral": true,
         *         "name": "silver-robin-horse-albatross-armadillo.taile18a.ts.net",
         *         "type": "NODE"
         *       },
         *       "type": "CONFIG"
         *     } */
        ConfigurationAuditLog: {
            /**
             * @description Timestamp of the audit log event, in RFC 3339 format.
             * @example 2024-06-06T15:25:26.583893Z
             */
            eventTime: string;
            /**
             * @description The type of log (always "CONFIG").
             * @enum {string}
             */
            type: "CONFIG";
            /**
             * @description Timestamp recording the time that the audit log rate limiter enqueued the record to be logged at a future time, in RFC 3339 format.
             * @example 0001-01-01T00:00:00Z
             */
            deferredAt?: string;
            /**
             * @description Identifier assigned to one or more audit log events, all of which are the result of a single operation.
             * @example 0378d8f57300d172ef7ae3826e097ef0
             */
            eventGroupID: string;
            /**
             * @description The initiator of the action that generated the event, typically an API or user interface, like the Tailscale admin panel.
             * @example ADMIN_CONSOLE
             * @enum {string}
             */
            origin: "ADMIN_CONSOLE" | "CONFIG_API" | "CONTROL" | "IDENTITY_PROVIDER" | "NODE" | "SUPPORT_REQUEST" | "STRIPE" | "SECURITY_NOTIFICATION" | "LEGAL_NOTIFICATION";
            /** @description The person who caused the action related to this event. */
            actor: {
                /**
                 * @description The ID (user ID or node ID) of the actor.
                 * @example uZKk3KSfrH11KTM59
                 */
                id?: string;
                /**
                 * @description The entity type of the actor.
                 * @example USER
                 * @enum {string}
                 */
                type?: "USER" | "NODE" | "AUTOMATED_WORKER" | "OAUTH_CLIENT" | "SCIM" | "MULLVAD" | "LOGSTREAM" | "SECRET_SCANNER";
                /**
                 * @description The login name of the actor at time of the action.
                 * @example lion.dahlia.armadillo@example.com
                 */
                loginName?: string;
                /** @description The display name of the actor at time of the action. */
                displayName?: string;
                /**
                 * @description Indicates the tags owning a node. Its value is only set if `type` is `NODE`.
                 * @example [
                 *       "server",
                 *       "datacenter1"
                 *     ]
                 */
                tags?: string[];
            };
            /** @description The object of this event's action. */
            target: {
                /**
                 * @description The unique ID (user id, tailnet SID, or node id) of the target.
                 * @example nBLYviWLGB21KTM59
                 */
                id?: string;
                /**
                 * @description Name of the entity at time of the action.
                 * @example silver-robin-horse-albatross-armadillo.taile18a.ts.net
                 */
                name?: string;
                /**
                 * @description The entity type of Target.
                 * @example NODE
                 * @enum {string}
                 */
                type?: "TAILNET" | "USER" | "GROUP" | "NODE" | "API_KEY" | "INVITE" | "SHARE" | "BILLING" | "ADMIN_CONSOLE" | "WEB_INTERFACE" | "WEBHOOK_ENDPOINT" | "FAILED_REQUEST";
                /**
                 * @description Indicates whether the target is ephemeral. Its value should only be set if `type` is `NODE``.
                 * @example true
                 */
                isEphemeral?: boolean;
                /**
                 * @description The property name on this target which was updated by the event. When empty, the event didn't update any fields on this target.
                 * @example ALLOWED_IPS
                 * @enum {string}
                 */
                property?: "ACL" | "ACL_TAGS" | "ACCOUNT_EMAIL" | "ADDRESS" | "ALLOWED_IPS" | "AUTO_APPROVED_ROUTES" | "ATTRIBUTES" | "BILLING_OWNER" | "COLLECT_SERVICES" | "COLLECT_POSTURE_IDENTITY" | "MULLVAD_VPN" | "DNS_CONFIG" | "EMAIL" | "EXIT_NODE" | "FEATURE" | "FILE_SHARING" | "HTTPS" | "KEY_EXPIRY_TIME" | "KEY_EXPIRY" | "LOG_EXIT_FLOWS" | "LOGSTREAM_ENDPOINT" | "MAGIC_DNS" | "MACHINE_AUTH_NEEDED" | "MACHINE_APPROVAL_NEEDED" | "USER_APPROVAL_REQUIRED" | "MACHINE_NAME" | "MAX_KEY_DURATION" | "NETWORK_FLOW_LOGGING" | "GEOSTEERING" | "NODE_SHARE" | "TAILNET_INVITE" | "PAYMENT_INFO" | "POSTURE_IDENTITY" | "POSTURE_INTEGRATION" | "USER_ROLE" | "SCIM" | "SECURITY_EMAIL" | "STRIPE_CUSTOMER_ID" | "SUBSCRIPTION" | "SUBSCRIBED_EVENTS" | "SUPPORT_EMAIL" | "SECRET" | "TCD" | "TKA" | "AUTH_PROVIDER";
            };
            /**
             * @description The type of change attempted against the `target`.
             * @example CREATE
             * @enum {string}
             */
            action: "LOGIN" | "LOGOUT" | "CREATE" | "UPDATE" | "DELETE" | "CANCEL" | "REVOKE" | "APPROVE" | "SUSPEND" | "RESTORE" | "ENABLE" | "DISABLE" | "ACCEPT" | "EXPIRED" | "PUSH_USER" | "PUSH_GROUP" | "VERIFY" | "JOIN_WAITLIST" | "INVITE" | "JOIN" | "LEAVE" | "RESEND" | "MIGRATE_AUTH_PROVIDER";
            /** @description The value of `target.property`` prior to the event. */
            old?: string | number | boolean | unknown[] | Record<string, never>;
            /** @description The value of `target.property` after the event. */
            new?: string | number | boolean | unknown[] | Record<string, never>;
            /** @description Additional information about the event, such as a client-provided reason, if it exists. */
            actionDetails?: string;
            /** @description Provided when the configuration change failed to be completed. It is a user-presentable reason for the failure. */
            error?: string;
        };
        ConnectionCounts: {
            /**
             * @description IP protocol name (or number if no name used).
             * @example ipv4
             * @enum {string}
             */
            proto?: "ah" | "dccp" | "egp" | "esp" | "gre" | "icmp" | "igmp" | "igp" | "ipv4" | "ipv6-icmp" | "sctp" | "tcp" | "udp";
            /**
             * @description Source addr:port.
             * @example 108.86.185.125:52343
             */
            src?: string;
            /**
             * @description Destination addr:port.
             * @example 108.86.185.126:443
             */
            dst?: string;
            /**
             * @description Number of packets sent.
             * @example 10
             */
            txPkts?: number;
            /**
             * @description Number of bytes sent.
             * @example 1000
             */
            txBytes?: number;
            /**
             * @description Number of packets received.
             * @example 10
             */
            rxPkts?: number;
            /**
             * @description Number of bytes received.
             * @example 1000
             */
            rxBytes?: number;
        };
        /** @example {
         *       "logged": "2024-06-06T15:27:26.583893Z",
         *       "nodeId": "nBLYviWLGB21KTM59",
         *       "start": "2024-06-06T15:25:26.583893Z",
         *       "end": "2024-06-06T15:26:26.583893Z",
         *       "virtualTraffic": [
         *         {
         *           "proto": "ipv4",
         *           "src": "108.86.185.125:52343",
         *           "dst": "108.86.185.126:443",
         *           "txPkts": 10,
         *           "txBytes": 10000,
         *           "rxPkts": 10,
         *           "rxBytes": 10000
         *         }
         *       ],
         *       "subnetTraffic": [
         *         {
         *           "proto": "ipv4",
         *           "src": "108.86.185.125:52343",
         *           "dst": "108.86.185.126:443",
         *           "txPkts": 10,
         *           "txBytes": 10000,
         *           "rxPkts": 10,
         *           "rxBytes": 10000
         *         }
         *       ],
         *       "exitTraffic": [
         *         {
         *           "proto": "ipv4",
         *           "src": "108.86.185.125:52343",
         *           "dst": "108.86.185.126:443",
         *           "txPkts": 10,
         *           "txBytes": 10000,
         *           "rxPkts": 10,
         *           "rxBytes": 10000
         *         }
         *       ],
         *       "physicalTraffic": [
         *         {
         *           "proto": "ipv4",
         *           "src": "108.86.185.125:52343",
         *           "dst": "108.86.185.126:443",
         *           "txPkts": 10,
         *           "txBytes": 10000,
         *           "rxPkts": 10,
         *           "rxBytes": 10000
         *         }
         *       ]
         *     } */
        NetworkFlowLog: {
            /**
             * @description Timestamp of the flow log, in RFC 3339 format.
             * @example 2024-06-06T15:27:26.583893Z
             */
            logged?: string;
            /**
             * @description Identifier of the node.
             * @example nBLYviWLGB21KTM59
             */
            nodeId?: string;
            /**
             * @description Time at which flow started, in RFC 3339 format.
             * @example 2024-06-06T15:25:26.583893Z
             */
            start?: string;
            /**
             * @description Time at which flow ended, in RFC 3339 format.
             * @example 2024-06-06T15:26:26.583893Z
             */
            end?: string;
            virtualTraffic?: components["schemas"]["ConnectionCounts"][];
            subnetTraffic?: components["schemas"]["ConnectionCounts"][];
            exitTraffic?: components["schemas"]["ConnectionCounts"][];
            physicalTraffic?: components["schemas"]["ConnectionCounts"][];
        };
        /**
         * @description The type of log for logging endpoints.
         *
         * @example configuration
         * @enum {string}
         */
        LogType: "configuration" | "network";
        /**
         * @description Latest status of log stream publishing for a specific type of log.
         * @example {
         *       "lastActivity": "2024-06-10T15:42:13.984555636Z",
         *       "lastError": "",
         *       "maxBodySize": 524288,
         *       "numBytesSent": 17238983,
         *       "numEntriesSent": 8363,
         *       "numFailedRequests": 5434,
         *       "numSpoofedEntries": 0,
         *       "numTotalRequests": 10610,
         *       "rateBytesSent": 3.524073767296142,
         *       "rateEntriesSent": 0.008564949767446907,
         *       "rateFailedRequests": 4.1431119220540763e-157,
         *       "rateTotalRequests": 0.0037038341100629453
         *     }
         */
        LogstreamEndpointPublishingStatus: {
            /**
             * @description Timestamp of the most recent publishing activity, in RFC 3339 format.
             * @example 2024-06-10T15:42:13.984555636Z
             */
            lastActivity: string;
            /**
             * @description The most recent error (if any).
             * @example Something went wrong.
             */
            lastError: string;
            /**
             * @description The size of the largest single request body.
             * @example 524288
             */
            maxBodySize: number;
            /**
             * @description Total bytes published across all requests.
             * @example 17238983
             */
            numBytesSent: number;
            /**
             * @description The total number of entries published.
             * @example 8363
             */
            numEntriesSent: number;
            /**
             * @description The number of spoofed entries published. A spoofed entry is one that failed to validate because we did not see receive a matching flow log from the other side of the connection.
             * @example 0
             */
            numSpoofedEntries: number;
            /**
             * @description The total number of requests made to the streaming endpoint.
             * @example 10610
             */
            numTotalRequests: number;
            /**
             * @description The total number of requests to the streaming endpoint that have failed.
             * @example 5434
             */
            numFailedRequests: number;
            /**
             * @description The exponentially weighted moving average rate at which data is being streamed to the endpoint, in bytes per second.
             * @example 3.524073767296142
             */
            rateBytesSent: number;
            /**
             * @description The exponentially weighted moving average rate at which entries are being sent to the endpoint, in entries per second.
             * @example 0.008564949767446907
             */
            rateEntriesSent: number;
            /**
             * @description The exponentially weighted moving average rate at which requests are being made to the endpoint, in requests per second.
             * @example 0.0037038341100629453
             */
            rateTotalRequests: number;
            /**
             * @description The exponentially weighted moving average rate at which requests are failing, in requests per second.
             * @example 4.1431119220540763e-157
             */
            rateFailedRequests: number;
        };
        /**
         * @description The current configuration of a log streaming endpoint.
         * @example {
         *       "logType": "configuration",
         *       "destinationType": "elastic",
         *       "url": "http://100.71.134.73:80/config-log-datastream",
         *       "user": "myusername"
         *     }
         */
        LogstreamEndpointConfiguration: {
            /** @description The type of log that is streamed to this endpoint. */
            readonly logType?: components["schemas"]["LogType"];
            /**
             * @description The type of system to which logs are being streamed.
             * @example elastic
             * @enum {string}
             */
            destinationType?: "splunk" | "elastic" | "panther" | "cribl" | "datadog" | "axiom";
            /**
             * @description The URL to which log streams are being posted.
             * @example http://100.71.134.73:80/config-log-datastream
             */
            url?: string;
            /**
             * @description The username with which log streams to this endpoint are authenticated.
             * @example myusername
             */
            user?: string;
            /**
             * @description The token/password with which log streams to this endpoint should be authenticated.
             * @example mytoken
             */
            token?: string;
        };
        DnsPreferences: {
            /**
             * @description Whether MagicDNS is active for this tailnet.
             *
             * @example true
             */
            magicDNS: boolean;
        };
        DnsSearchPaths: {
            /**
             * @description The search domains for the given tailnet.
             *
             * @example [
             *       "user1.example.com",
             *       "user2.example.com"
             *     ]
             */
            searchPaths: string[];
        };
        /**
         * @description Map of domain names to lists of nameservers or to `null`.
         *
         * @example {
         *       "example.com": [
         *         "1.1.1.1",
         *         "1.2.3.4"
         *       ],
         *       "other.com": [
         *         "2.2.2.2"
         *       ]
         *     }
         */
        SplitDns: {
            [key: string]: string[] | null;
        };
        /** @description `capabilities` is a mapping of resources to permissible actions.
         *      */
        KeyCapabilities: {
            /** @description `devices` specifies the key's permissions over devices.
             *     This field is only populated for auth keys.
             *      */
            devices?: {
                /** @description `create` specifies the key's permissions when creating devices.
                 *      */
                create?: {
                    /**
                     * @description reusable for auth keys only; reusable auth keys can be used multiple times to register different devices.
                     *     Learn more about reusable auth keys at https://tailscale.com/kb/1085/#types-of-auth-keys.
                     *
                     * @example true
                     */
                    reusable?: boolean;
                    /**
                     * @description ephemeral for auth keys only; ephemeral keys are used to connect and then clean up short-lived devices.
                     *     Learn about ephemeral nodes at https://tailscale.com/kb/1111/.
                     *
                     * @example false
                     */
                    ephemeral?: boolean;
                    /**
                     * @description preauthorized for auth keys only; these are also referred to as "pre-approved" keys. 'true' means that devices
                     *     registered with this key won't require additional approval from a tailnet admin.
                     *     Learn about device approval at https://tailscale.com/kb/1099/.
                     *
                     * @example true
                     */
                    preauthorized?: boolean;
                    /** @description tags are the tags that will be set on devices registered with this key.
                     *     Learn about tags at https://tailscale.com/kb/1068/.
                     *
                     *     Whether tags are required or optional depends on the owner of the auth key:
                     *     - When creating an auth key owned by the tailnet (using OAuth), it must have tags. The auth tags specified for that new auth key must exactly match the tags that are on the OAuth client used to create that auth key (or they must be tags that are owned by the tags that are on the OAuth client used to create the auth key).
                     *     - When creating an auth key owned by a user (using a user's access token), tags are optional.
                     *      */
                    tags?: string[];
                };
            };
        };
        /** @description An API access token or Auth Key.
         *      */
        Key: {
            /** @example k123456CNTRL */
            id?: string;
            /**
             * Format: date-time
             * @example 2021-12-09T23:22:39Z
             */
            created?: string;
            /**
             * Format: date-time
             * @example 2022-03-09T23:22:39Z
             */
            expires?: string;
            /**
             * Format: date-time
             * @example 2022-03-12T23:22:39Z
             */
            revoked?: string;
            capabilities?: components["schemas"]["KeyCapabilities"];
            /** @example dev access */
            description?: string;
            /**
             * @description Response for a revoked (deleted) or expired key will have an `invalid` field set to true.
             *
             * @example false
             */
            invalid?: boolean;
            /**
             * @description ID of the user who created this key, empty for keys created by OAuth clients.
             *
             * @example uscwcTtzzo11KTM59
             */
            userId?: string;
        };
        /**
         * @description A configured PostureIntegration.
         * @example {
         *       "id": "p56wQiqrn7mfKTM59",
         *       "provider": "intune",
         *       "cloudId": "global",
         *       "clientId": "93013672-b00c-4344-80ca-7ecf74f9dce1",
         *       "tenantId": "d1ae389b-5207-43a2-afca-2de6b03ac7e3",
         *       "configUpdated": "2024-06-18T13:44:28.250168Z",
         *       "status": {
         *         "error": "Invalid Tenant ID.\nMicrosoft error: AADSTS90002: Tenant 'd1ae389b-5207-43a2-afca-2de6b03ac7e3' not found. Check to make sure you have the correct tenant ID and are signing into the correct cloud. Check with your subscription administrator, this may happen if there are no active subscriptions for the tenant. Trace ID: f6237360-98a2-4889-913b-e3d80aba7d00 Correlation ID: a2024a6e-7757-4406-8a8d-1b6ac2e03ad5 Timestamp: 2024-06-18 13:44:33Z",
         *         "lastSync": "2024-06-18T08:44:33.872282-05:00",
         *         "matchedCount": 0,
         *         "possibleMatchedCount": 0,
         *         "providerHostCount": 0
         *       }
         *     }
         */
        PostureIntegration: {
            /**
             * @description The device posture provider.
             *
             *     Required on POST requests, ignored on PATCH requests.
             *
             * @example falcon
             * @enum {string}
             */
            provider?: "falcon" | "intune" | "jamfpro" | "kandji" | "kolide" | "sentinelone";
            /**
             * @description Identifies which of the provider's clouds to integrate with.
             *
             *     - For CrowdStrike Falcon, it will be one of `us-1`, `us-2`, `eu-1` or `us-gov`.
             *     - For Microsoft Intune, it will be one of `global` or `us-gov`.
             *     - For Jamf Pro, Kandji and Sentinel One, it is the FQDN of your subdomain, for example `mydomain.sentinelone.net`.
             *     - For Kolide, this is left blank.
             *
             * @example us-1
             */
            cloudId?: string;
            /**
             * @description Unique identifier for your client.
             *
             *     - For Microsoft Intune, it will be your application's UUID.
             *     - For CrowdStrike Falcon and Jamf Pro, it will be your client id.
             *     - For Kandji, Kolide and Sentinel One, this is left blank.
             *
             * @example us-1
             */
            clientId?: string;
            /**
             * @description The Microsoft Intune directory (tenant) ID. For other providers, this is left blank.
             * @example d1ae389b-5207-43a2-afca-2de6b03ac7e3
             */
            tenantId?: string;
            /**
             * @description The secret (auth key, token, etc.) used to authenticate with the provider.
             *
             *     Required when creating a new integration, may be omitted when updating an existing integration, in which case we retain the existing password.
             *
             * @example as32598d#@%asdf
             */
            clientSecret?: string;
            /**
             * @description A unique identifier for the integration (generated by the system).
             * @example pcBEPQVMpki7KTM59
             */
            readonly id?: string;
            /**
             * @description Timestamp of the last time this configuration was updated, in RFC 3339 format.
             * @example 2024-06-18T13:43:43.239839Z
             */
            readonly configUpdated?: string;
            /** @description Most recent status for this integration. */
            readonly status?: {
                /**
                 * @description Timestamp of the last synchronization with the device posture provider, in RFC 3339 format.
                 * @example 2024-06-18T08:44:33.872282-05:00
                 */
                lastSync?: string;
                /**
                 * @description If the last synchronization failed, this shows the error message associated with the failed synchronization.
                 * @example Invalid Tenant ID.
                 *     Microsoft error: AADSTS90002: Tenant 'd1ae389b-5207-43a2-afca-2de6b03ac7e3' not found. Check to make sure you have the correct tenant ID and are signing into the correct cloud. Check with your subscription administrator, this may happen if there are no active subscriptions for the tenant. Trace ID: f6237360-98a2-4889-913b-e3d80aba7d00 Correlation ID: a2024a6e-7757-4406-8a8d-1b6ac2e03ad5 Timestamp: 2024-06-18 13:44:33Z
                 */
                error?: string;
                /**
                 * @description The number of devices known to the provider.
                 * @example 98
                 */
                providerHostCount?: number;
                /**
                 * @description The number of Tailscale nodes that were matched with provider.
                 * @example 11
                 */
                matchedCount?: number;
                /**
                 * @description The number of Tailscale nodes with identifiers for matching.
                 * @example 16
                 */
                possibleMatchedCount?: number;
            };
        };
        /** @description Representation of a user within a tailnet.
         *      */
        User: {
            /**
             * @description The unique identifier for the user.
             *     Supply this value wherever {userId} is indicated in an endpoint.
             *
             * @example 123456
             */
            id?: string;
            /**
             * @description The name of the user.
             *
             * @example Some User
             */
            displayName?: string;
            /**
             * @description The emailish login name of the user.
             *
             * @example someuser@example.com
             */
            loginName?: string;
            /**
             * @description The profile pic URL for the user.
             *
             * @example
             */
            profilePicUrl?: string;
            /**
             * @description The tailnet that owns the user.
             *
             * @example example.com
             */
            tailnetId?: string;
            /**
             * Format: date-time
             * @description The time the user joined their tailnet.
             *
             * @example 2022-12-01T05:23:30Z
             */
            created?: string;
            /**
             * @description The type of relation this user has to the tailnet associated with the request.
             *
             * @example member
             * @enum {string}
             */
            type?: "member" | "shared";
            /**
             * @description The role of the user. Learn more about [user roles](kb/1138/user-roles).
             *
             * @example member
             * @enum {string}
             */
            role?: "owner" | "member" | "admin" | "it-admin" | "network-admin" | "billing-admin" | "auditor";
            /**
             * @description The status of the user.
             *
             * @example active
             * @enum {string}
             */
            status?: "active" | "idle" | "suspended" | "needs-approval" | "over-billing-limit";
            /**
             * @description Number of devices the user owns.
             *
             * @example 4
             */
            deviceCount?: number;
            /**
             * Format: date-time
             * @description The later of either:
             *     - The last time any of the user's nodes were connected to the network.
             *     - The last time the user authenticated to any tailscale service, including the admin panel.
             *
             * @example 2022-12-01T05:23:30Z
             */
            lastSeen?: string;
            /**
             * @description `true` when the user has a node currently connected to the control server.
             *
             * @example true
             */
            currentlyConnected?: boolean;
        };
        /**
         * @description A tailnet contact.
         * @example {
         *       "email": "user@example.com",
         *       "fallbackEmail": "otheruser@example.com\"",
         *       "needsVerification": true
         *     }
         */
        Contact: {
            /**
             * @description The contact's email address.
             * @example user@example.com
             */
            email?: string;
            /**
             * @description The email address used when contact's email address has not been verified.
             * @example otheruser@example.com
             */
            fallbackEmail?: string;
            /**
             * @description Indicates whether the contact's email address still needs to be verified.
             * @example true
             */
            needsVerification?: boolean;
        };
        Webhook: {
            /**
             * @description ID of the webhook endpoint.
             *
             * @example 123456
             */
            endpointId?: string;
            /**
             * @description The endpoint that events are sent to from Tailscale via POST requests.
             *
             * @example https://example.com/endpoint
             */
            endpointUrl?: string;
            /**
             * @description The provider type for the webhook destination, or an empty string if none are applicable.
             *     Outgoing webhook events are sent in the format expected by the provider type if non-empty.
             *
             * @example slack
             * @enum {string}
             */
            providerType?: "slack" | "mattermost" | "googlechat" | "discord";
            /**
             * @description The login name for the creator of the webhook endpoint.
             *     In some cases, such as webhooks created with an OAuth client, this can be blank.
             *
             * @example user@example.com
             */
            creatorLoginName?: string;
            /**
             * Format: date-time
             * @description The time the webhook endpoint was created.
             *
             * @example 2022-12-01T05:23:30Z
             */
            created?: string;
            /**
             * Format: date-time
             * @description The time the webhook endpoint was last modified.
             *
             * @example 2022-12-01T05:23:30Z
             */
            lastModified?: string;
            /**
             * @description The list of subscribed events that trigger POST requests to the configured endpoint URL.
             *     Learn more about [webhook events](/kb/1213/webhooks#events).
             *
             * @example [
             *       "nodeCreated",
             *       "userDeleted"
             *     ]
             */
            subscriptions?: ("nodeCreated" | "nodeNeedsApproval" | "nodeApproved" | "nodeKeyExpiringInOneDay" | "nodeKeyExpired" | "nodeDeleted" | "policyUpdate" | "userCreated" | "userNeedsApproval" | "userSuspended" | "userRestored" | "userDeleted" | "userApproved" | "userRoleUpdated" | "subnetIPForwardingNotEnabled" | "exitNodeIPForwardingNotEnabled")[];
            /**
             * Format: password
             * @description The webhook secret associated with the endpoint.
             *     Only populated on creation or when the secret is rotated.
             *
             *     This secret is used for generating the `Tailscale-Webhook-Signature` header in requests sent to the endpoint URL.
             *     Learn more about [verifying webhook event signatures](/kb/1213/webhooks#verifying-an-event-signature).
             *
             * @example xxxxx
             */
            secret?: string;
        };
        /**
         * @description The provider type for the webhook destination, or an empty string if none are applicable.
         *     Outgoing webhook events are sent in the format expected by the provider type if non-empty.
         *
         * @example slack
         * @enum {string}
         */
        providerType: "slack" | "mattermost" | "googlechat" | "discord";
        /**
         * @description The list of subscribed events that trigger POST requests to the configured endpoint URL.
         *     Learn more about [webhook events](/kb/1213/webhooks#events).
         *
         * @example [
         *       "nodeCreated",
         *       "userDeleted"
         *     ]
         */
        subscriptions: ("nodeCreated" | "nodeNeedsApproval" | "nodeApproved" | "nodeKeyExpiringInOneDay" | "nodeKeyExpired" | "nodeDeleted" | "policyUpdate" | "userCreated" | "userNeedsApproval" | "userSuspended" | "userRestored" | "userDeleted" | "userApproved" | "userRoleUpdated" | "subnetIPForwardingNotEnabled" | "exitNodeIPForwardingNotEnabled")[];
        /** @description Settings for a tailnet.
         *      */
        TailnetSettings: {
            /**
             * @description Whether [device approval](/kb/1099/device-approval) is enabled for the tailnet.
             *
             * @example false
             */
            devicesApprovalOn?: boolean;
            /**
             * @description Whether [auto updates](/kb/1067/update#auto-updates) are enabled for devices that belong to this tailnet.
             *
             * @example false
             */
            devicesAutoUpdatesOn?: boolean;
            /**
             * @description The [key expiry](/kb/1028/key-expiry) duration for devices on this tailnet.
             *
             * @example 180
             */
            devicesKeyDurationDays?: number;
            /**
             * @description Whether [user approval](/kb/1239/user-approval) is enabled for this tailnet.
             *
             * @example true
             */
            usersApprovalOn?: boolean;
            /**
             * @description Which user roles are allowed to [join external tailnets](/kb/1271/invite-any-user).
             *
             * @example admin
             * @enum {string}
             */
            usersRoleAllowedToJoinExternalTailnets?: "none" | "admin" | "member";
            /**
             * @description Whether [network flog logs](/kb/1219/network-flow-logs) are enabled for the tailnet.
             *
             * @example false
             */
            networkFlowLoggingOn?: boolean;
            /**
             * @description Whether [regional routing](/kb/1115/high-availability#regional-routing) is enabled for the tailnet.
             *
             * @example false
             */
            regionalRoutingOn?: boolean;
            /**
             * @description Whether [identity collection](/kb/1326/device-identity) is enabled for [device posture](/kb/1288/device-posture) integrations for the tailnet.
             *
             * @example false
             */
            postureIdentityCollectionOn?: boolean;
        };
    };
    responses: {
        /** @description Bad request. */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Forbidden. */
        403: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not found. */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Conflict. */
        409: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error. */
        500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not implemented. */
        501: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Bad gateway. */
        502: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description The tailnet organization name.
         *
         *     When specifying a tailnet in the API, you can:
         *
         *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
         *       This is the best option for most users.
         *       Your API calls would start:
         *
         *       ```sh
         *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
         *       ```
         *
         *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
         *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
         *
         *       For example, if your organization name is `alice@example.com`, your API calls would start:
         *
         *       ```sh
         *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
         *       ```
         *
         *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
         *      */
        tailnet: string;
        /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
         *      */
        deviceId: string;
        /** @description The name of the posture attribute to set.
         *     This must be prefixed with `custom`:
         *
         *     Keys have a maximum length of 50 characters including the namespace,
         *     and can only contain letters, numbers, underscores, and colon.
         *
         *     Keys are case-sensitive. Keys must be unique,
         *     but are checked for uniqueness in a case-insensitive manner.
         *     For example, `custom:MyAttribute` and `custom:myattribute` cannot both be set within a single tailnet.
         *
         *     All values for a given key need to be of the same type,
         *     which is determined when the first value is written for a given key.
         *     For example, `custom:myattribute` cannot have a numeric value (`8`7) for one node and a string value (`"78"`)
         *     for another node within the same tailnet.
         *      */
        attributeKey: string;
        /** @description ID of the user invite. */
        userInviteId: string;
        /** @description ID of the device invite. */
        deviceInviteId: string;
        /** @description The start of the time window for which to retrieve logs, in RFC 3339 format. */
        start: string;
        /** @description The end of the time window for which to retrieve logs, in RFC 3339 format. */
        end: string;
        /** @description List of filters on actors, either exact actor IDs or a wildcard search on login name or display name indicated as `~search`. */
        actor: string[];
        /** @description List of target elements for which to filter, attempts to match any part of any of the targets to any of the given strings. */
        target: string[];
        /** @description List of events for which to filter. */
        event: ("ADMIN_CONSOLE.LOGIN" | "ADMIN_CONSOLE.LOGOUT" | "API_KEY.CREATE" | "API_KEY.EXPIRED" | "API_KEY.REVOKE" | "BILLING.CANCEL.SUBSCRIPTION" | "BILLING.CREATE.SUBSCRIPTION" | "BILLING.UPDATE.ADDRESS" | "BILLING.UPDATE.BILLING_OWNER" | "BILLING.UPDATE.EMAIL" | "BILLING.UPDATE.PAYMENT_INFO" | "BILLING.UPDATE.STRIPE_CUSTOMER_ID" | "BILLING.UPDATE.SUBSCRIPTION" | "FAILED_REQUEST.UPDATE" | "GROUP.PUSH_GROUP.ATTRIBUTES" | "INVITE.ACCEPT.FEATURE" | "INVITE.ACCEPT.NODE_SHARE" | "INVITE.ACCEPT.TAILNET_INVITE" | "INVITE.CREATE.FEATURE" | "INVITE.CREATE.NODE_SHARE" | "INVITE.CREATE.TAILNET_INVITE" | "INVITE.DELETE.NODE_SHARE" | "INVITE.DELETE.TAILNET_INVITE" | "INVITE.RESEND.NODE_SHARE" | "INVITE.RESEND.TAILNET_INVITE" | "NODE.APPROVE" | "NODE.CREATE" | "NODE.CREATE.ATTRIBUTES" | "NODE.DELETE" | "NODE.DELETE.ATTRIBUTES" | "NODE.DISABLE.KEY_EXPIRY" | "NODE.ENABLE.KEY_EXPIRY" | "NODE.EXPIRED.KEY_EXPIRY_TIME" | "NODE.LOGIN" | "NODE.LOGOUT" | "NODE.REVOKE" | "NODE.UPDATE.ACL_TAGS" | "NODE.UPDATE.ALLOWED_IPS" | "NODE.UPDATE.ATTRIBUTES" | "NODE.UPDATE.AUTO_APPROVED_ROUTES" | "NODE.UPDATE.EXIT_NODE" | "NODE.UPDATE.KEY_EXPIRY_TIME" | "NODE.UPDATE.MACHINE_NAME" | "NODE.UPDATE.POSTURE_IDENTITY" | "NODE.UPDATE.TKA" | "SHARE.CREATE" | "SHARE.DELETE" | "SHARE.UPDATE" | "TAILNET.ACCEPT.FEATURE" | "TAILNET.CREATE" | "TAILNET.CREATE.LOGSTREAM_ENDPOINT" | "TAILNET.CREATE.POSTURE_INTEGRATION" | "TAILNET.CREATE.TKA" | "TAILNET.DELETE.LOGSTREAM_ENDPOINT" | "TAILNET.DELETE.POSTURE_INTEGRATION" | "TAILNET.DELETE.TKA" | "TAILNET.DISABLE.COLLECT_POSTURE_IDENTITY" | "TAILNET.DISABLE.COLLECT_SERVICES" | "TAILNET.DISABLE.FILE_SHARING" | "TAILNET.DISABLE.GEOSTEERING" | "TAILNET.DISABLE.HTTPS" | "TAILNET.DISABLE.LOG_EXIT_FLOWS" | "TAILNET.DISABLE.MACHINE_APPROVAL_NEEDED" | "TAILNET.DISABLE.MAGIC_DNS" | "TAILNET.DISABLE.MULLVAD_VPN" | "TAILNET.DISABLE.NETWORK_FLOW_LOGGING" | "TAILNET.DISABLE.SCIM" | "TAILNET.DISABLE.TKA" | "TAILNET.DISABLE.USER_APPROVAL_REQUIRED" | "TAILNET.ENABLE.COLLECT_POSTURE_IDENTITY" | "TAILNET.ENABLE.COLLECT_SERVICES" | "TAILNET.ENABLE.FILE_SHARING" | "TAILNET.ENABLE.GEOSTEERING" | "TAILNET.ENABLE.HTTPS" | "TAILNET.ENABLE.LOG_EXIT_FLOWS" | "TAILNET.ENABLE.MACHINE_APPROVAL_NEEDED" | "TAILNET.ENABLE.MAGIC_DNS" | "TAILNET.ENABLE.MULLVAD_VPN" | "TAILNET.ENABLE.NETWORK_FLOW_LOGGING" | "TAILNET.ENABLE.SCIM" | "TAILNET.ENABLE.TKA" | "TAILNET.ENABLE.USER_APPROVAL_REQUIRED" | "TAILNET.JOIN" | "TAILNET.JOIN_WAITLIST.FEATURE" | "TAILNET.LEAVE" | "TAILNET.UPDATE.ACCOUNT_EMAIL" | "TAILNET.UPDATE.ACL" | "TAILNET.UPDATE.DNS_CONFIG" | "TAILNET.UPDATE.LOGSTREAM_ENDPOINT" | "TAILNET.UPDATE.MAX_KEY_DURATION" | "TAILNET.UPDATE.POSTURE_INTEGRATION" | "TAILNET.UPDATE.SECURITY_EMAIL" | "TAILNET.UPDATE.SUPPORT_EMAIL" | "TAILNET.UPDATE.TCD" | "TAILNET.UPDATE.TKA" | "TAILNET.VERIFY.ACCOUNT_EMAIL" | "TAILNET.VERIFY.SECURITY_EMAIL" | "TAILNET.VERIFY.SUPPORT_EMAIL" | "USER.APPROVE" | "USER.CREATE" | "USER.DELETE" | "USER.INVITE" | "USER.PUSH_USER.ATTRIBUTES" | "USER.RESEND.TAILNET_INVITE" | "USER.RESTORE" | "USER.SUSPEND" | "USER.UPDATE.USER_ROLE" | "WEBHOOK_ENDPOINT.CREATE" | "WEBHOOK_ENDPOINT.DELETE" | "WEBHOOK_ENDPOINT.UPDATE.SECRET" | "WEBHOOK_ENDPOINT.UPDATE.SUBSCRIBED_EVENTS" | "WEB_INTERFACE.LOGIN" | "WEB_INTERFACE.LOGOUT")[];
        /** @description The type of log. */
        logType: components["schemas"]["LogType"];
        /** @description If set to true, this will return all auth keys, API acess tokens and OAuth clients for the tailnet. */
        all: boolean;
        /** @description The id of the key.
         *     The key ID can be found in the [admin console](https://login.tailscale.com/admin/settings/keys).
         *      */
        keyId: string;
        /** @description Response is encoded as JSON if `application/json` is requested, otherwise HuJSON will be returned. */
        AcceptHeaderParam: string;
        /** @description Unique identifier for a posture integration. */
        id: string;
        /** @description ID of the user.
         *      */
        userId: string;
        /** @description Type of contact. */
        contactType: "account" | "support" | "security";
        /** @description ID for the webhook endpoint.
         *      */
        endpointId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listTailnetDevices: {
        parameters: {
            query?: {
                /** @description Optionally controls whether the response returns **all** fields or only a predefined subset of fields.
                 *     Currently, there are two supported options:
                 *
                 *     - **`all`:** return all fields in the response
                 *     - **`default`:** return all fields **except**:
                 *       - `enabledRoutes`
                 *       - `advertisedRoutes`
                 *       - `clientConnectivity` (which contains the following fields: `mappingVariesByDestIP`, `derp`, `endpoints`, `latency`, and `clientSupports`)
                 *
                 *     If the `fields` parameter is not supplied, then the default (limited fields) option is used.
                 *      */
                fields?: "all" | "default";
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        devices?: components["schemas"]["Device"][];
                    };
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"];
                };
            };
            /** @description Invalid ID supplied. */
            400: components["responses"]["400"];
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid device value. */
            400: components["responses"]["400"];
            500: components["responses"]["500"];
            /** @description Device not owned by tailnet. */
            501: components["responses"]["501"];
        };
    };
    expireDeviceKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    listDeviceRoutes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceRoutes"];
                };
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setDeviceRoutes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The new list of enabled subnet routes.
                     *
                     * @example [
                     *       "10.0.0.0/16",
                     *       "192.168.1.0/24"
                     *     ]
                     */
                    routes?: string[];
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceRoutes"];
                };
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    authorizeDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description - If `true`, authorize a new device or re-authorize a previously deauthorized device.
                     *     - If `false`, deauthorize an authorized device.
                     *      */
                    authorized: boolean;
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setDeviceName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The new name for the device.
                     *
                     *     This can be provided as either the fully qualified domain name for the device (e.g. "nodename.your-domain.ts.net")
                     *     or just the base name (e.g. "nodename").
                     *
                     *     If `name` is unset or provided empty, the device's name is reset to be
                     *     generated from its OS hostname.
                     *
                     * @example dev-server
                     */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setDeviceTags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The new list of tags for the device.
                     *
                     * @example [
                     *       "tag:foo",
                     *       "tag:bar"
                     *     ]
                     */
                    tags?: string[];
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            500: components["responses"]["500"];
        };
    };
    updateDeviceKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description - If `true`, disable the device's key expiry. The original key expiry time is still maintained. Upon re-enabling, the key will expire at that original time.
                     *     - If `false`, enable the device's key expiry. Sets the key to expire at the original expiry time prior to disabling. The key may already have expired. In that case, the device must be re-authenticated.
                     *
                     * @example true
                     */
                    keyExpiryDisabled: boolean;
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setDeviceIp: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The new IPv4 address for the device.
                     *
                     * @example 100.80.0.1
                     */
                    ipv4: string;
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getDevicePostureAttributes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicePostureAttributes"];
                };
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setCustomDevicePostureAttributes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
                /** @description The name of the posture attribute to set.
                 *     This must be prefixed with `custom`:
                 *
                 *     Keys have a maximum length of 50 characters including the namespace,
                 *     and can only contain letters, numbers, underscores, and colon.
                 *
                 *     Keys are case-sensitive. Keys must be unique,
                 *     but are checked for uniqueness in a case-insensitive manner.
                 *     For example, `custom:MyAttribute` and `custom:myattribute` cannot both be set within a single tailnet.
                 *
                 *     All values for a given key need to be of the same type,
                 *     which is determined when the first value is written for a given key.
                 *     For example, `custom:myattribute` cannot have a numeric value (`8`7) for one node and a string value (`"78"`)
                 *     for another node within the same tailnet.
                 *      */
                attributeKey: components["parameters"]["attributeKey"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description A value can be either a string, number or boolean.
                     *
                     *     A string value can have a maximum length of 50 characters,
                     *     and can only contain letters, numbers, underscores, and periods.
                     *
                     *     A number value is an integer and must be a JSON safe number (up to 2^53 - 1).
                     *
                     * @example my_value
                     */
                    value?: string | number | boolean;
                    /**
                     * Format: date-time
                     * @description An optional expiry time for a given posture attribute. If set, Tailscale
                     *     will automatically remove the attribute within a few minutes after the specified
                     *     time.
                     *
                     * @example 2022-12-01T05:23:30Z
                     */
                    expiry?: string;
                    /** @description An optional comment indicating a reason why an attribute is set,
                     *     which will be added to the audit log.
                     *      */
                    comment?: string;
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicePostureAttributes"];
                };
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteCustomDevicePostureAttributes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
                /** @description The name of the posture attribute to set.
                 *     This must be prefixed with `custom`:
                 *
                 *     Keys have a maximum length of 50 characters including the namespace,
                 *     and can only contain letters, numbers, underscores, and colon.
                 *
                 *     Keys are case-sensitive. Keys must be unique,
                 *     but are checked for uniqueness in a case-insensitive manner.
                 *     For example, `custom:MyAttribute` and `custom:myattribute` cannot both be set within a single tailnet.
                 *
                 *     All values for a given key need to be of the same type,
                 *     which is determined when the first value is written for a given key.
                 *     For example, `custom:myattribute` cannot have a numeric value (`8`7) for one node and a string value (`"78"`)
                 *     for another node within the same tailnet.
                 *      */
                attributeKey: components["parameters"]["attributeKey"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    listDeviceInvites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceInvite"][];
                };
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createDeviceInvites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device. Using the device's `nodeId` is preferred, but its numeric `id` value can also be used.
                 *      */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        /** @description Device invites to create. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Whether the invite can be accepted more than once.
                     *     When set to `true`, it results in an invite that can be accepted up to 1,000 times.
                     *
                     * @example false
                     */
                    multiUse?: boolean;
                    /**
                     * @description Whether the invited user can use the device as an exit node when it advertises as one.
                     *
                     * @example false
                     */
                    allowExitNode?: boolean;
                    /**
                     * @description The email to send the created invite to.
                     *     If not set, the endpoint generates and returns an invite URL (but doesn't send it out).
                     *
                     * @example user@example.com
                     */
                    email?: string;
                }[];
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceInvite"][];
                };
            };
            /** @description Device not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    listUserInvites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInvite"][];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createUserInvites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Optionally specifies a user role to assign the invited user.
                     *
                     * @default member
                     * @example admin
                     * @enum {string}
                     */
                    role?: "member" | "admin" | "it-admin" | "network-admin" | "billing-admin" | "auditor";
                    /**
                     * @description Optionally specifies the email to send the created invite.
                     *     If not set, the endpoint generates and returns an invite URL, but does not email it out.
                     *
                     * @example user@example.com
                     */
                    email?: string;
                }[];
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInvite"][];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getUserInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user invite. */
                userInviteId: components["parameters"]["userInviteId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInvite"];
                };
            };
            /** @description User invite not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteUserInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user invite. */
                userInviteId: components["parameters"]["userInviteId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User invite not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    resendUserInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user invite. */
                userInviteId: components["parameters"]["userInviteId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User invite not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getDeviceInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device invite. */
                deviceInviteId: components["parameters"]["deviceInviteId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceInvite"];
                };
            };
            /** @description Device invite not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteDeviceInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device invite. */
                deviceInviteId: components["parameters"]["deviceInviteId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device invite not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    resendDeviceInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the device invite. */
                deviceInviteId: components["parameters"]["deviceInviteId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device invite not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    acceptDeviceInvite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The URL of the invite (in the form `https://login.tailscale.com/admin/invite/{code}`) or the `{code}` component of the URL.
                     *
                     * @example https://login.tailscale.com/admin/invite/xxxxxx
                     */
                    invite: string;
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Information about the device being shared.
                         *      */
                        device?: {
                            /**
                             * @description The `nodeId` for the device.
                             *
                             * @example 12346
                             */
                            id?: string;
                            /**
                             * @description The operating system that the device is running.
                             *
                             * @example iOS
                             */
                            os?: string;
                            /**
                             * @description The name of the device.
                             *
                             * @example my-phone
                             */
                            name?: string;
                            /**
                             * @description The MagicDNS name of the device.
                             *     Learn more about MagicDNS at https://tailscale.com/kb/1081/.
                             *
                             * @example my-phone.something.ts.net
                             */
                            fqdn?: string;
                            /**
                             * @description The IPv4 address of the device.
                             *
                             * @example 100.x.y.z
                             */
                            ipv4?: string;
                            /**
                             * @description The IPv6 address of the device.
                             *
                             * @example fd7a:115c:x::y:z
                             */
                            ipv6?: string;
                            /**
                             * @description Specifies whether the invited user is able to use the
                             *     device as an exit node when the device is advertising as one.
                             *
                             * @example false
                             */
                            includeExitNode?: boolean;
                        };
                        /** @description The user who create the device share invite.
                         *      */
                        sharer?: {
                            /**
                             * @description The ID of the user who created the share invite.
                             *
                             * @example 22012
                             */
                            id?: string;
                            /**
                             * @description The display name of the user who created the share invite.
                             *
                             * @example Some User
                             */
                            displayName?: string;
                            /**
                             * @description The email address of the user who created the share invite.
                             *
                             * @example someuser@example.com
                             */
                            loginName?: string;
                            /**
                             * @description The profile pic URL for the user who created the share invite.
                             *
                             * @example
                             */
                            profilePicURL?: string;
                        };
                        /** @description The user accepting the device share invite.
                         *      */
                        acceptedBy?: {
                            /**
                             * @description The ID of the user who accepted the share invite.
                             *
                             * @example 33233
                             */
                            id?: string;
                            /**
                             * @description The display name of the user who accepted the share invite.
                             *
                             * @example Another User
                             */
                            displayName?: string;
                            /**
                             * @description The email address of the user who accepted the share invite.
                             *
                             * @example anotheruser@example2.com
                             */
                            loginName?: string;
                            /**
                             * @description The profile pic URL for the user who accepted the share invite.
                             *
                             * @example
                             */
                            profilePicURL?: string;
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            500: components["responses"]["500"];
        };
    };
    listConfigurationAuditLogs: {
        parameters: {
            query: {
                /** @description The start of the time window for which to retrieve logs, in RFC 3339 format. */
                start: components["parameters"]["start"];
                /** @description The end of the time window for which to retrieve logs, in RFC 3339 format. */
                end: components["parameters"]["end"];
                /** @description List of filters on actors, either exact actor IDs or a wildcard search on login name or display name indicated as `~search`. */
                actor?: components["parameters"]["actor"];
                /** @description List of target elements for which to filter, attempts to match any part of any of the targets to any of the given strings. */
                target?: components["parameters"]["target"];
                /** @description List of events for which to filter. */
                event?: components["parameters"]["event"];
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Version of audit logs response.
                         * @example 1.1
                         */
                        version?: string;
                        /**
                         * @description The tailnet on which the logged configuration changes were made.
                         * @example example.com
                         */
                        tailnet?: string;
                        /** @description Matching log entries, ordered chronologically. */
                        logs?: components["schemas"]["ConfigurationAuditLog"][];
                    };
                };
            };
            /** @description Request has missing or invalid parameter(s). */
            400: components["responses"]["400"];
            /** @description User does not have sufficient access to view configuration audit logs. */
            403: components["responses"]["403"];
            /** @description Logging is not supported on this deployment of Tailscale. */
            404: components["responses"]["404"];
        };
    };
    listNetworkFlowLogs: {
        parameters: {
            query: {
                /** @description The start of the time window for which to retrieve logs, in RFC 3339 format. */
                start: components["parameters"]["start"];
                /** @description The end of the time window for which to retrieve logs, in RFC 3339 format. */
                end: components["parameters"]["end"];
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. The `logs` field contains an array of [NetworkFlowLog](#model/networkflowlog) objects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Matching log entries, ordered chronologically. */
                        logs?: components["schemas"]["NetworkFlowLog"][];
                    };
                };
            };
            /** @description Request has missing or invalid parameter(s). */
            400: components["responses"]["400"];
            /** @description User does not have sufficient access to view network flow logs. */
            403: components["responses"]["403"];
            /** @description Logging is not supported on this deployment of Tailscale. */
            404: components["responses"]["404"];
            /** @description The system was unable to communicate with logging server. */
            502: components["responses"]["502"];
        };
    };
    getLogStreamingStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description The type of log. */
                logType: components["parameters"]["logType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogstreamEndpointPublishingStatus"];
                };
            };
            /** @description Log streaming has not been configured, this `logType` is not supported, or user does not have sufficient access to view log streaming status. */
            404: components["responses"]["404"];
            /** @description The system was unable to communicate with logging server. */
            502: components["responses"]["502"];
        };
    };
    getLogStreamingConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description The type of log. */
                logType: components["parameters"]["logType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogstreamEndpointConfiguration"];
                };
            };
            /** @description Log streaming has not been configured, this `logType` is not supported, or user does not have sufficient access to view log streaming configuration. */
            404: components["responses"]["404"];
        };
    };
    setLogStreamingConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description The type of log. */
                logType: components["parameters"]["logType"];
            };
            cookie?: never;
        };
        /** @description The [LogstreamEndpointConfiguration](#model/logstreamendpointconfiguration) to set.
         *     `logType` is specified in the request URL rather than the body.
         *      */
        requestBody?: {
            content: {
                /** @example {
                 *       "destinationType": "elastic",
                 *       "url": "http://100.71.134.73:80/config-log-datastream",
                 *       "user": "myusername",
                 *       "token": "mytoken"
                 *     } */
                "application/json": components["schemas"]["LogstreamEndpointConfiguration"];
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request has missing or invalid parameter(s). */
            400: components["responses"]["400"];
            /** @description User does not have sufficient access to update log streaming configuration. */
            403: components["responses"]["403"];
            /** @description Tailnet not found, this `logType` is not supported, or user does not have sufficient access to view log streaming configuration. */
            404: components["responses"]["404"];
        };
    };
    disableLogStreaming: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description The type of log. */
                logType: components["parameters"]["logType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have sufficient access to update log streaming configuration. */
            403: components["responses"]["403"];
            /** @description Log streaming has not been configured, this `logType` is not supported, or user does not have sufficient access to view log streaming configuration. */
            404: components["responses"]["404"];
        };
    };
    listDnsNameservers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description DNS nameservers.
                         *
                         * @example [
                         *       "8.8.8.8",
                         *       "1.2.3.4"
                         *     ]
                         */
                        dns?: string[];
                    };
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setDnsNameservers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description DNS nameservers.
                     *
                     * @example [
                     *       "8.8.8.8",
                     *       "1.2.3.4"
                     *     ]
                     */
                    dns?: string[];
                };
            };
        };
        responses: {
            /** @description Succesful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description DNS nameservers.
                         *
                         * @example [
                         *       "8.8.8.8",
                         *       "1.2.3.4"
                         *     ]
                         */
                        dns?: string[];
                        /**
                         * @description Whether MagicDNS is active for this tailnet.
                         *
                         * @example true
                         */
                        magicDNS?: boolean;
                    };
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getDnsPreferences: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Succesful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsPreferences"];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setDnsPreferences: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DnsPreferences"];
            };
        };
        responses: {
            /** @description Succesful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsPreferences"];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    listDnsSearchPaths: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsSearchPaths"];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setDnsSearchPaths: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DnsSearchPaths"];
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsSearchPaths"];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getSplitDns: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Succesful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitDns"];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setSplitDns: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SplitDns"];
            };
        };
        responses: {
            /** @description Succesful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitDns"];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    updateSplitDns: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SplitDns"];
            };
        };
        responses: {
            /** @description Succesful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitDns"];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    listTailnetKeys: {
        parameters: {
            query: {
                /** @description If set to true, this will return all auth keys, API acess tokens and OAuth clients for the tailnet. */
                all: components["parameters"]["all"];
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A list of the active keys.
                         * @example [
                         *       {
                         *         "id": "XXXX14CNTRL",
                         *         "description": "test key",
                         *         "userId": "uscwcTtzzo11KTM59"
                         *       },
                         *       {
                         *         "id": "XXXXZ3CNTRL",
                         *         "description": "production key",
                         *         "userId": "uscwcTtzzo11KTM59"
                         *       },
                         *       {
                         *         "id": "XXXX43CNTRL"
                         *       },
                         *       {
                         *         "id": "XXXXgj1CNTRL",
                         *         "userId": "uscwcTtzzo11KTM59"
                         *       }
                         *     ]
                         */
                        keys?: components["schemas"]["Key"][];
                    };
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createAuthKey: {
        parameters: {
            query: {
                /** @description If set to true, this will return all auth keys, API acess tokens and OAuth clients for the tailnet. */
                all: components["parameters"]["all"];
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        /** @description At a minimum, the request POST body must have a `capabilities` object with a `devices` object,
         *     though it can be an empty JSON object.
         *     With nothing else supplied, such a request generates a single-use key with no tags.
         *      */
        requestBody?: {
            content: {
                "application/json": {
                    capabilities: components["schemas"]["KeyCapabilities"];
                    /**
                     * @description Specifies the duration in seconds until the key should expire. Defaults to 90 days if not supplied.
                     *
                     * @example 86400
                     */
                    expirySeconds?: number;
                    /**
                     * @description A short string specifying the purpose of the key. Can be a maximum of 50 alphanumeric characters. Hyphens and spaces are also allowed.
                     *
                     * @example dev access
                     */
                    description?: string;
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Key"];
                };
            };
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description The id of the key.
                 *     The key ID can be found in the [admin console](https://login.tailscale.com/admin/settings/keys).
                 *      */
                keyId: components["parameters"]["keyId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation.
             *
             *     Response for a revoked (deleted) or expired key will have an `invalid` field set to true.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Key"];
                };
            };
            /** @description Tailnet or key not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description The id of the key.
                 *     The key ID can be found in the [admin console](https://login.tailscale.com/admin/settings/keys).
                 *      */
                keyId: components["parameters"]["keyId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have sufficient access to delete this key. */
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getPolicyFile: {
        parameters: {
            query?: {
                /** @description Request a detailed description of the tailnet policy file by providing `details=true` in the URL query string.
                 *     Supplying any other value for `details`, or not sending the param, is treated as sending `details=false`.
                 *     If using this, do not supply an `Accept` parameter in the header.
                 *
                 *     The response will contain a JSON object with the fields:
                 *     - `acl`: a base64-encoded string representation of the huJSON format.
                 *     - `warnings`: array of strings for syntactically valid but nonsensical entries.
                 *     - `errors`: an array of strings for parsing failures.
                 *      */
                details?: boolean;
            };
            header?: {
                /** @description Response is encoded as JSON if `application/json` is requested, otherwise HuJSON will be returned. */
                Accept?: components["parameters"]["AcceptHeaderParam"];
            };
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                    "application/hujson": string;
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    setPolicyFile: {
        parameters: {
            query?: never;
            header?: {
                /** @description Response is encoded as JSON if `application/json` is requested, otherwise HuJSON will be returned. */
                Accept?: components["parameters"]["AcceptHeaderParam"];
                /** @description This is a safety mechanism to avoid overwriting other users' updates to the tailnet policy file.
                 *
                 *     - Set the `If-Match` value to that of the `ETag` header returned in a `GET` request to `/api/v2/tailnet/{tailnet}/acl`.
                 *       Tailscale compares the `ETag` value in your request to that of the current tailnet file and only replaces the file if there's a match.
                 *       (A mismatch indicates that another update has been made to the file.) For example: `-H "If-Match: \"e0b2816b418\""`.
                 *     - Alternately, set the `If-Match` value to `ts-default` to ensure that the policy file is replaced *only if the current policy file is still the untouched default created automatically* for each tailnet.
                 *       For example: `-H "If-Match: \"ts-default\""`.
                 *      */
                "If-Match"?: string;
            };
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
                "application/hujson": string;
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                    "application/hujson": string;
                };
            };
            /** @description ACL validation or test error. */
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            /** @description If-Match hash mismatch. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            500: components["responses"]["500"];
        };
    };
    previewRuleMatches: {
        parameters: {
            query: {
                /** @description Specify for which type of resource (user or IP port) matching rules are to be fetched.
                 *     Read about [previewing changes in the admin console](https://tailscale.com/kb/1018/#previewing-changes).
                 *
                 *     OAuth Scope: `policy_file:read`.
                 *      */
                type: "user" | "ipport";
                /** @description - If `type` is `user`, provide the email of a valid user with registered machines.
                 *     - If `type` is `ipport`, provide an IP address + port: `10.0.0.1:80`.
                 *
                 *     The supplied policy file is queried with this parameter to determine which rules match.
                 *      */
                previewFor: string;
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
                "application/hujson": string;
            };
        };
        responses: {
            /** @description The list of rules that apply to the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        matches: {
                            /**
                             * @description Source entities affected by the rule.
                             *
                             * @example [
                             *       "*"
                             *     ]
                             */
                            users: string[];
                            /**
                             * @description Destinations that can be accessed.
                             *
                             * @example [
                             *       "*.*"
                             *     ]
                             */
                            ports: string[];
                            /**
                             * @description The rule's location in the policy file.
                             *
                             * @example 19
                             */
                            lineNumber: number;
                        }[];
                        /**
                         * @description Echoes the `type` provided in the request.
                         *
                         * @example user
                         */
                        type: string;
                        /**
                         * @description Echoes the `previewFor` provided in the request.
                         *
                         * @example user1@example.com
                         */
                        previewFor: string;
                    };
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    validateAndTestPolicyFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Specifies the user identity to test, which can be
                     *     a [user's email address](https://tailscale.com/kb/1337/acl-syntax#reference-users),
                     *     a [group](https://tailscale.com/kb/1337/acl-syntax#groups),
                     *     a [tag](https://tailscale.com/kb/1068/acl-tags),
                     *     or a [host](https://tailscale.com/kb/1337/acl-syntax#hosts) that maps to an IP address.
                     *     The test case runs from the perspective of a device authenticated with the provided identity.
                     *
                     * @example dave@example.com
                     */
                    src: string;
                    /**
                     * @description Specifies the [device posture attributes](https://tailscale.com/kb/1337/acl-syntax#proto-1)
                     *     as key-value pairs to use when evaluating posture conditions in access rules.
                     *     You only need to use this field if the access rules contain
                     *     [device posture conditions](https://tailscale.com/kb/1288/device-posture#device-posture-conditions).
                     *
                     * @example {
                     *       "node:os": "windows"
                     *     }
                     */
                    srcPostureAttrs?: {
                        [key: string]: string | number | boolean;
                    };
                    /**
                     * @description Specifies the IP protocol for `accept` and `deny` rules,
                     *     similar to the `proto` field in [ACL rules](https://tailscale.com/kb/1337/acl-syntax#acls).
                     *     When omitted, the test checks for either TCP or UDP access.
                     *
                     * @example tcp
                     */
                    proto?: string;
                    /** @description Specifies destinations to accept. Each destination in the list is of the form `host:port`
                     *     where `port` is a single numeric port and `host` is in the format described in the
                     *     [acl syntax](https://tailscale.com/kb/1337/acl-syntax#accept-and-deny-destinations) documentation.
                     *
                     *     Sources in `src` and `destinations` must refer to specific entities and do not support `*` wildcards.
                     *     For example, an `accept` destination cannot be `tags:*`.
                     *      */
                    accept?: string[];
                    /** @description Specifies destinations to deny. Each destination in the list is of the form `host:port`
                     *     where `port` is a single numeric port and `host` is in the format described in the
                     *     [acl syntax](https://tailscale.com/kb/1337/acl-syntax#accept-and-deny-destinations) documentation.
                     *
                     *     Sources in `src` and `destinations` must refer to specific entities and do not support `*` wildcards.
                     *     For example, a `deny` destination cannot be `tags:*`.
                     *      */
                    deny?: string[];
                }[] | string;
                "application/husjon": string;
            };
        };
        responses: {
            /** @description Validation or tests have run. An empty response body implies passing validation or tests. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example test(s) failed */
                        message?: string;
                        /** @example [
                         *       {
                         *         "user": "user1@example.com",
                         *         "errors": [
                         *           "address \"2.2.2.2:22\": want: Drop, got: Accept"
                         *         ]
                         *       }
                         *     ] */
                        data?: Record<string, never>[];
                    };
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getPostureIntegrations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of PostureIntegrations. */
                        integrations?: components["schemas"]["PostureIntegration"][];
                    };
                };
            };
            /** @description User does not have sufficient access to list posture integrations. */
            403: components["responses"]["403"];
        };
    };
    createPostureIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "provider": "intune",
                 *       "cloudId": "global",
                 *       "clientId": "93013672-b00c-4344-80ca-7ecf74f9dce1",
                 *       "tenantId": "d1ae389b-5207-43a2-afca-2de6b03ac7e3",
                 *       "clientSecret": "as32598d#@%asdf"
                 *     } */
                "application/json": components["schemas"]["PostureIntegration"];
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostureIntegration"];
                };
            };
            /** @description User does not have sufficient access to create posture integrations. */
            403: components["responses"]["403"];
            /** @description A posture integration for the same provider already exists. */
            409: components["responses"]["409"];
        };
    };
    getPostureIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for a posture integration. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostureIntegration"];
                };
            };
            /** @description Posture integration not found, or user is not authorized to read it. */
            404: components["responses"]["404"];
        };
    };
    deletePostureIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for a posture integration. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have sufficient access to delete this posture integration. */
            403: components["responses"]["403"];
            /** @description Posture integration not found. */
            404: components["responses"]["404"];
        };
    };
    updatePostureIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for a posture integration. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "cloudId": "global",
                 *       "clientId": "93013672-b00c-4344-80ca-7ecf74f9dce1",
                 *       "tenantId": "d1ae389b-5207-43a2-afca-2de6b03ac7e3",
                 *       "clientSecret": "as32598d#@%asdf"
                 *     } */
                "application/json": components["schemas"]["PostureIntegration"];
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostureIntegration"];
                };
            };
            /** @description User does not have sufficient access to update this posture integration. */
            403: components["responses"]["403"];
            /** @description Posture integration not found. */
            404: components["responses"]["404"];
        };
    };
    listUsers: {
        parameters: {
            query?: {
                /** @description Allows for filtering the output by user type.
                 *      */
                type?: "member" | "shared" | "all";
                /** @description Allows for filtering the output by user role. Learn more about [user roles](kb/1138/user-roles).
                 *      */
                role?: "owner" | "member" | "admin" | "it-admin" | "network-admin" | "billing-admin" | "auditor" | "all";
            };
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        users?: components["schemas"]["User"][];
                    };
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Tailnet not found, or user does not have access to read users. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description User not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    updateUserRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The role of the user. Learn more about [user roles](kb/1138/user-roles).
                     *
                     * @example member
                     * @enum {string}
                     */
                    role?: "owner" | "member" | "admin" | "it-admin" | "network-admin" | "billing-admin" | "auditor";
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description User not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    approveUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description User not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    suspendUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description User not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    restoreUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description User not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user.
                 *      */
                userId: components["parameters"]["userId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description User not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getContacts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        account?: components["schemas"]["Contact"];
                        support?: components["schemas"]["Contact"];
                        security?: components["schemas"]["Contact"];
                    };
                };
            };
            /** @description User does not have sufficient access to view contacts on this tailnet. */
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    updateContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description Type of contact. */
                contactType: components["parameters"]["contactType"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "email": "newuser@example.com"
                 *     } */
                "application/json": {
                    /**
                     * @description The contact's email address.
                     * @example newuser@example.com
                     */
                    email: string;
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have sufficient access to update contacts for this tailnet. */
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    resendContactVerificationEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
                /** @description Type of contact. */
                contactType: components["parameters"]["contactType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Verification is not required, can't resend email. */
            400: components["responses"]["400"];
            /** @description User does not have sufficient access to update contacts for this tailnet. */
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    listWebhooks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        webhooks?: components["schemas"]["Webhook"][];
                    };
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The endpoint that events are sent to from Tailscale via POST requests.
                     *
                     * @example https://example.com/endpoint
                     */
                    endpointUrl: string;
                    providerType?: components["schemas"]["providerType"];
                    subscriptions: components["schemas"]["subscriptions"];
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID for the webhook endpoint.
                 *      */
                endpointId: components["parameters"]["endpointId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Webhook not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID for the webhook endpoint.
                 *      */
                endpointId: components["parameters"]["endpointId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Webhook not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    updateWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID for the webhook endpoint.
                 *      */
                endpointId: components["parameters"]["endpointId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    subscriptions?: components["schemas"]["subscriptions"];
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    testWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID for the webhook endpoint.
                 *      */
                endpointId: components["parameters"]["endpointId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully queued test event. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description User not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    rotateWebhookSecret: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID for the webhook endpoint.
                 *      */
                endpointId: components["parameters"]["endpointId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            400: components["responses"]["400"];
            403: components["responses"]["403"];
            /** @description Webhook not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getTailnetSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TailnetSettings"];
                };
            };
            400: components["responses"]["400"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    updateTailnetSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tailnet organization name.
                 *
                 *     When specifying a tailnet in the API, you can:
                 *
                 *     - Provide a dash (`-`) to reference the default tailnet of the access token being used to make the API call.
                 *       This is the best option for most users.
                 *       Your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/-/..."
                 *       ```
                 *
                 *     - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**
                 *       page of the Tailscale admin console (not to be confused with the "tailnet name" found in the DNS tab).
                 *
                 *       For example, if your organization name is `alice@example.com`, your API calls would start:
                 *
                 *       ```sh
                 *       curl "https://api.tailscale.com/api/v2/tailnet/alice@example.com/..."
                 *       ```
                 *
                 *       Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name).
                 *      */
                tailnet: components["parameters"]["tailnet"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TailnetSettings"];
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TailnetSettings"];
                };
            };
            400: components["responses"]["400"];
            /** @description Tailnet not found. */
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
}
